<?php

/**
 * @file
 * Functions to support theming.
 */

use Drupal\Core\Url;  // Ensure this line is within the PHP tags

/**
 * Implements hook_preprocess_image_widget().
 */
function iketheme_preprocess_image_widget(array &$variables) {
  $data = &$variables['data'];

  // This prevents image widget templates from rendering preview container HTML
  // to users that do not have permission to access these previews.
  // @todo revisit in https://drupal.org/node/953034
  // @todo revisit in https://drupal.org/node/3114318
  if (isset($data['preview']['#access']) && $data['preview']['#access'] === FALSE) {
    unset($data['preview']);
  }
}

/** for flag icon js **/
function yourtheme_preprocess_page(&$variables) {
  if (\Drupal::routeMatch()->getRouteName() == 'view.lesson_plans.page') {
    $variables['#attached']['library'][] = 'yourtheme/flag_icon';
  }
}


function iketheme_preprocess_page(&$variables) {
    // Define an array of field names and their corresponding template variable names.
    $fields = [
        'field_hero_background_image' => 'hero_background_image_url',
        'field_hero_background' => 'hero_background_url',
    ];

    if (isset($variables['node'])) {
        foreach ($fields as $fieldName => $variableName) {
            if ($variables['node']->hasField($fieldName) && !$variables['node']->get($fieldName)->isEmpty()) {
                $fileUri = $variables['node']->get($fieldName)->entity->getFileUri();
                $variables[$variableName] = \Drupal::service('file_url_generator')->generateAbsoluteString($fileUri);
            } else {
                // Provide a default if no image is set
                $variables[$variableName] = Url::fromUri('base://path/to/default/image.jpg')->toString();
            }
        }
    }
}

function iketheme_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  // Retrieve the current node from the route.
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    // Add a template suggestion for the content type.
    $suggestions[] = 'page__' . $node->bundle();
  }
}


use Drupal\Component\Utility\Html;
use Drupal\Core\Logger\LoggerChannelFactoryInterface;

/**
 * Implements hook_theme_suggestions_HOOK_alter() for views view fields.
 */
function iketheme_theme_suggestions_views_view_field_alter(array &$suggestions, array $variables) {
  $view_id = $variables['view']->id();
  $display_id = $variables['view']->current_display;

  // List of views and displays that should use the custom template
  $target_views = [
    'ike_s_life_west_point' => ['block_1'],
    'ike_s_life_boyhood' => ['block_1'], // Ensure you use the correct display ID
  ];

  if (isset($target_views[$view_id]) && in_array($display_id, $target_views[$view_id])) {
    $suggestions[] = 'views_view_field__ikes_life_wide';
    \Drupal::logger('iketheme')->notice(Html::escape('Applied custom field template to view: ' . $view_id . ', display: ' . $display_id));
  } else {
    \Drupal::logger('iketheme')->notice(Html::escape('Skipped custom field template for view: ' . $view_id . ', display: ' . $display_id));
  }
}


function iketheme_preprocess_node(&$variables) {
  // Check if the node is of type 'soldier'.
  if ($variables['node']->bundle() == 'soldier') {
    $node = $variables['node'];
    $flag_link = [
      '#lazy_builder' => [
        'flag.link_builder:build',
        [
          $node->getEntityTypeId(),
          $node->id(),
          'bookmark', // Replace with your actual flag's machine name.
        ],
      ],
      '#create_placeholder' => TRUE,
    ];
    $variables['flag_link'] = $flag_link;
  }
}