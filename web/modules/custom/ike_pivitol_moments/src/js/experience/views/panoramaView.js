// Generated by CoffeeScript 1.8.0

/*
PANORAMA VIEW COMPONENT
Args:
  model : json following IntroModel structure or PanoramaModel instance
  queue : optional reference to createjs.LoadQueue, in case preloading is centralized
Triggers:
  "ready" : this
  "render" : this
  "error" : this, tech ("flash", "canvas")
 */

(function() {
  define(["jquery", "underscore", "backbone", "modernizr", "easeljs", "preloadjs", "soundjs", "tweenlite", "js/experience/models/panoramaModel"], function($, _, Backbone, Modernizr, easeljs, preloadjs, soundjs, TweenLite, PanoramaModel) {
    return Backbone.View.extend({
      NORMAL_CAMPOINT: {
        x: 0.5,
        y: 0.5
      },
      PARALLAX_COEF: 0.05,
      NORMAL_COORDS: {
        x: 0.5,
        y: 0.5,
        z: 0
      },
      MIN_X: 0.05,
      MAX_X: 0.95,
      MIN_Y: 0,
      MAX_Y: 1,
      MIN_Z: 0,
      MAX_Z: 4,
      DPI_SCALE: 0.7,
      className: "panorama-view",
      getBounds: function() {
        if (this._stage == null) {
          return null;
        }
        return {
          x: this._stage.x / this.DPI_SCALE,
          y: this._stage.y / this.DPI_SCALE,
          width: this._width / this.DPI_SCALE,
          height: this._height / this.DPI_SCALE
        };
      },
      isReady: function() {
        return this._ready || false;
      },
      audioError: function() {
        return this._techError || "";
      },
      enableMouse: function(bool) {
        if (!(this._stage || bool === (this._mouseMoveListener != null))) {
          return;
        }
        if (bool) {
          this._mouseMoveListener = (function(_this) {
            return function(event) {
              return _this._dirty = true;
            };
          })(this);
          return this._stage.addEventListener("stagemousemove", this._mouseMoveListener);
        } else {
          return this._stage.removeEventListener("stagemousemove", this._mouseMoveListener);
        }
      },
      resize: function() {
        var height, width;
        if (!(this._imageWidth && this._imageHeight)) {
          return;
        }
        width = this.$el.width();
        height = this.$el.height();
        this._ratioScale = this._imageWidth / this._imageHeight < width / height ? width / this._imageWidth : height / this._imageHeight;
        this._ratioScale *= this.DPI_SCALE;
        this._$canvas.attr({
          "width": width * this.DPI_SCALE,
          "height": height * this.DPI_SCALE
        }).css({
          "width": width,
          "height": height
        });
        this._cameraPoint = {
          x: this.NORMAL_CAMPOINT.x * width,
          y: this.NORMAL_CAMPOINT.y * height
        };
        if (this._normalCoords) {
          this._normalCoords.w = width / this._imageWidth;
          this._normalCoords.h = height / this._imageHeight;
        }
        return this._dirty = true;
      },
      open: function() {
        if (this._isOpen) {
          return;
        }
        this._isOpen = true;
        this.$el.fadeIn();
        if (this._tickListener == null) {
          this._tickListener = (function(_this) {
            return function(event) {
              return _this.render(event);
            };
          })(this);
          createjs.Ticker.addEventListener("tick", this._tickListener);
        }
        if (this.model.get("audio")) {
          if (this._audio != null) {
            return this._audio.play("none", 0, 0, -1);
          } else {
            return this._audio = createjs.Sound.play(this.model.get("audio"), null, 0, 0, -1);
          }
        }
      },
      close: function() {
        if (!this._isOpen) {
          return;
        }
        this._isOpen = false;
        this.$el.fadeOut();
        if (this._tickListener) {
          createjs.Ticker.removeEventListener("tick", this._tickListener);
        }
        this._tickListener = null;
        if (this._audio != null) {
          return this._audio.stop();
        }
      },
      panTo: function(newcoords, miliseconds, onChange, onComplete) {
        var coords;
        if (miliseconds == null) {
          miliseconds = 0;
        }
        coords = this.getNormalCoords();
        if (this._panCoords == null) {
          this._panCoords = {};
        }
        this._panCoords.x = coords.x;
        this._panCoords.y = coords.y;
        this._panCoords.z = coords.z;
        return this._panTween = TweenLite.to(this._panCoords, miliseconds / 1000, {
          x: newcoords.x,
          y: newcoords.y,
          z: newcoords.z,
          ease: "Quad.easeInOut",
          onComplete: (function(_this) {
            return function() {
              if (onComplete) {
                return onComplete.call(_this);
              }
            };
          })(this),
          onUpdate: (function(_this) {
            return function() {
              _this.setNormalCoords(_this._panCoords.x, _this._panCoords.y, _this._panCoords.z);
              if (onChange != null) {
                return onChange.call(_this);
              }
            };
          })(this)
        });
      },
      stopPanning: function() {
        if (this._panTween) {
          this._panTween.kill();
        }
        return this._panTween["null"];
      },
      getNormalCoords: function() {
        return _.clone(this._normalCoords);
      },
      setNormalCoords: function(nx, ny, nz) {
        if (nx == null) {
          nx = this._normalCoords.x;
        }
        if (ny == null) {
          ny = this._normalCoords.y;
        }
        if (nz == null) {
          nz = this._normalCoords.z;
        }
        this._normalCoords.x = nx < this.MIN_X ? this.MIN_X : nx > this.MAX_X ? this.MAX_X : nx;
        this._normalCoords.y = ny < this.MIN_Y ? this.MIN_Y : ny > this.MAX_Y ? this.MAX_Y : ny;
        this._normalCoords.z = nz < this.MIN_Z ? this.MIN_Z : nz > this.MAX_Z ? this.MAX_Z : nz;
        this._normalCoords.w = this._$canvas[0].width / this._imageWidth / this._stage.scaleX;
        this._normalCoords.h = this._$canvas[0].height / this._imageWidth / this._stage.scaleX;
        this._zoomScale = Math.pow(2, this._normalCoords.z);
        return this._dirty = true;
      },
      initialize: function(args) {
        var asset, ext, _i, _len, _ref;
        this.model = new PanoramaModel(args.data);
        this._queue = args.queue || new createjs.LoadQueue(false);
        this._assets = [];
        this.model.childrenCollection.each((function(_this) {
          return function(model) {
            if (Modernizr.mobile) {
              model.set({
                url: model.get("alt") ? model.get("alt") : model.get("url"),
                data: ""
              }, {
                silent: true
              });
            }
            if (model.get("data") && !_this._queue.getResult(model.get("data"))) {
              _this._assets.push({
                src: model.get("data"),
                type: "json"
              });
            }
            if (model.get("url") && !_this._queue.getResult(model.get("url"))) {
              return _this._assets.push({
                src: model.get("url"),
                type: "image"
              });
            }
          };
        })(this));
        if (this.model.get("image") && !this._queue.getResult(this.model.get("image"))) {
          this._assets.push({
            src: this.model.get("image"),
            type: "image"
          });
        }
        if (this.model.get("audio") && !this._queue.getResult(this.model.get("audio"))) {
          ext = this.model.get("audio").split(".").pop().split("?").shift();
          if (createjs.Sound.getCapability(ext || (FlashPlugin.isSupported() && FlashPlugin.getCapability(ext)))) {
            this._assets.push({
              src: this.model.get("audio"),
              type: "sound"
            });
          } else {
            this._techError = "flash";
            this.trigger("error", this, this._techError);
          }
        }
        this._cachebust = "?cachebust=" + new Date().getTime().toString() + "&";
        _ref = this._assets;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          asset = _ref[_i];
          if (asset.src.lastIndexOf(".jpg") === -1) {
            asset.src += this._cachebust;
          }
        }
        console.log('@_assets >>> ', this._assets);
        if (this._assets.length) {
          this._fileCompleteHandler = (function(_this) {
            return function(event) {
              return _this._onItemComplete(event.item);
            };
          })(this);
          this._queue.addEventListener("error", this._fileCompleteHandler);
          this._queue.addEventListener("fileload", this._fileCompleteHandler);
          return this._queue.loadManifest(this._assets);
        } else {
          return this._build();
        }
      },
      render: function(event) {
        var dx, dy, sx, sy, tx, ty;
        if (this._stage != null) {
          if (this._dirty) {
            dx = this._stage.mouseX - this._cameraPoint.x;
            dy = this._stage.mouseY - this._cameraPoint.y;
            _.each(this._stage.children, (function(_this) {
              return function(child) {
                var coef, coords;
                coords = _this._childrenCoords[child.id];
                if (!coords.z) {
                  return;
                }
                coef = _this.PARALLAX_COEF * coords.z * .1;
                child.x = coords.x - dx * coef;
                return child.y = coords.y - dy * coef;
              };
            })(this));
            this._stage.scaleX = this._stage.scaleY = this._zoomScale * this._ratioScale + this.PARALLAX_COEF;
            this._width = this._imageWidth * this._stage.scaleX;
            tx = this._$canvas[0].width - this._width;
            sx = tx * this._normalCoords.x - dx * this.PARALLAX_COEF;
            this._stage.x = sx > 0 ? 0 : sx < tx ? tx : sx;
            this._height = this._imageHeight * this._stage.scaleY;
            ty = this._$canvas[0].height - this._height;
            sy = ty * this._normalCoords.y - dy * this.PARALLAX_COEF;
            this._stage.y = sy > 0 ? 0 : sy < ty ? ty : sy;
          }
          this._stage.update(event);
        } else if (this._dirty) {
          console.log("move fallback image");
        }
        if (this._dirty) {
          this.trigger("render", this);
        }
        return this._dirty = false;
      },
      destroy: function() {
        createjs.Ticker.removeAllEventListeners();
        createjs.Sound.removeAllSounds();
        this._$canvas = null;
        this._cameraPoint = null;
        this._dirty = null;
        this._ready = null;
        this._tickListener = null;
        this._assets = null;
        this._panCoords = null;
        this._childrenCoords = null;
        this._normalCoords = null;
        this._fileCompleteHandler = null;
        this._mouseMoveListener = null;
        this._height = null;
        this._width = null;
        this._ratioScale = null;
        this._imageWidth = null;
        this._imageHeight = null;
        this._zoomScale = null;
        if (this._stage) {
          this._stage.removeAllEventListeners();
        }
        this._stage = null;
        if (this._audio) {
          this._audio.removeAllEventListeners();
        }
        this._audio = null;
        if (this._panTween) {
          this._panTween.kill();
        }
        this._panTween = null;
        if (this._queue) {
          this._queue.removeAllEventListeners();
          this._queue.removeAll();
        }
        this._queue = null;
        this.remove();
        return this.off();
      },
      _onItemComplete: function(item) {
        var index;
        index = this._assets.indexOf(item);
        if (index >= 0) {
          this._assets.splice(index, 1);
        }
        if (this._assets.length) {
          return;
        }
        delete this._assets;
        this._queue.removeEventListener("error", this._fileCompleteHandler);
        this._queue.removeEventListener("fileload", this._fileCompleteHandler);
        return this._build();
      },
      _build: function() {
        var cachebust, canvas, collection, image;
        cachebust = this._cachebust;
        if (!this.$el.hasClass(this.className)) {
          this.$el.addClass(this.className);
        }
        image = this._queue.getResult(this.model.get("image") + cachebust);
        this._imageWidth = image != null ? image.width : 1200;
        this._imageHeight = image != null ? image.height : 700;
        this._$canvas = $("<canvas></canvas>").attr({
          width: this.$el.width() * this.DPI_SCALE,
          height: this.$el.height() * this.DPI_SCALE
        });
        this.$el.html(this._$canvas);
        console.log(this._queue);
        if (this._$canvas[0].getContext != null) {
          canvas = this._$canvas[0];
          collection = this.model.childrenCollection;
          this._childrenCoords = {};
          this._stage = new createjs.Stage(canvas);
          this._stage.scaleX = this._stage.scaleY = this.DPI_SCALE;
          collection.each((function(_this) {
            return function(model) {
              var bm, bounds, child, data;
              console.log(_this._queue.getResult(model.get("url") + cachebust), _this._queue.getResult(model.get("url")), model.get("url") + cachebust);
              bm = _this._queue.getResult(model.get("url") + cachebust) || _this._queue.getResult(model.get("url"));
              if (bm == null) {
                return;
              }
              if (!model.get("data")) {
                child = new createjs.Bitmap(bm);
                bounds = {
                  width: bm.width,
                  height: bm.height
                };
              } else {
                data = _this._queue.getResult(model.get("data") + cachebust) || _this._queue.getResult(model.get("data"));
                if (data == null) {
                  return;
                }
                data = _.extend({
                  images: [bm],
                  framerate: model.get("framerate") != null ? model.get("framerate") : 0
                }, data);
                child = new createjs.Sprite(new createjs.SpriteSheet(data));
                child.framerate = child.gotoAndPlay("all");
                bounds = child.spriteSheet.getFrameBounds(0);
              }
              child.x = model.get("x") * _this._imageWidth || 0;
              child.y = model.get("y") * _this._imageHeight || 0;
              child.alpha = model.get("alpha") || 1;
              child.scaleX = model.get("w") ? model.get("w") * _this._imageWidth / bounds.width : 1;
              child.scaleY = model.get("h") ? model.get("h") * _this._imageHeight / bounds.height : 1;
              _this._stage.addChild(child);
              return _this._childrenCoords[child.id] = {
                x: child.x,
                y: child.y,
                z: model.get("z")
              };
            };
          })(this));
          this.enableMouse(true);
        } else if (image != null) {
          this._$canvas.append(image);
        }
        this._cameraPoint = {
          x: this.NORMAL_CAMPOINT.x * this.$el.width(),
          y: this.NORMAL_CAMPOINT.y * this.$el.height()
        };
        this._normalCoords = {};
        this.setNormalCoords(this.NORMAL_COORDS.x, this.NORMAL_COORDS.y, this.NORMAL_COORDS.z);
        this._ratioScale = this.DPI_SCALE;
        this._dirty = true;
        this._ready = true;
        return this.trigger("ready", this);
      }
    });
  });

}).call(this);
