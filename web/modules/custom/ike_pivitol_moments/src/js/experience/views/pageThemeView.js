// Generated by CoffeeScript 1.8.0

/*
PAGE EXPERIENCE VIEW
Args:
  model: urlModel with page data (assigned before initialize by parent class)
Triggers:
  "ready": function(view) when it's ready to be displayed
  "progress": function(loaded, total, progress) while loading assets
  "error" function(message) when there's an error durign asset loading

URL subnid define a specific point in the page
subnid:
  page: "main", "film", number (for subpages)
  subpage: "main", "film"
 */

(function () {
  define(["jquery", "underscore", "backbone", "preloadjs", "soundjs", "js/experience/views/panoramaView", "js/experience/views/themeUIView", "js/experience/views/subthemeView", "js/experience/views/subthemeSubmenuView", "js/experience/views/videoView", "text!partials/experience/_theme.tpl.html"], function ($, _, Backbone, preloadjs, soundjs, PanoramaView, ThemeUIView, SubthemeView, SubthemeSubmenuView, VideoView, templateHTML) {
    return Backbone.View.extend({
      FADE_DURATION: 1000,
      INTRO_API: "intro",
      PANORAMA_API: "panorama",
      SUBTHEMES_API: "contents",
      SLIDESHOW_API: "slideshow",
      className: "page-theme-view",
      initialize: function (args) {
        var completeHandler, errorHandler, progressHandler;
        if (!this.$el.hasClass(this.className)) {
          this.$el.addClass(this.className);
        }
        this.args = args || {};
        this._subthemeIndex = 0;
        this._subsubnid = this.args.model ? this.args.model.get("subsubnid") : -1;
        this._queue = new createjs.LoadQueue(false);
        completeHandler = (function (_this) {
          return function (event) {
            return _this._onDataReady(event.target, event.type, completeHandler);
          };
        })(this);
        this._queue.addEventListener("complete", completeHandler);
        errorHandler = (function (_this) {
          return function (event) {
            return _this._onLoadError(event.target, event.type, event.item, event.error, errorHandler);
          };
        })(this);
        this._queue.addEventListener("error", errorHandler);
        progressHandler = (function (_this) {
          return function (event) {
            return _this._onLoadProgress(event.target, event.type, event.loaded, event.total, event.progress, event.target._numItems, progressHandler);
          };
        })(this);
        this._queue.addEventListener("progress", progressHandler);
        this._manifestArray = [
          {
            id: this.INTRO_API,
            type: "json",
            src: this.model.get("api")[this.INTRO_API]
          }, {
            id: this.PANORAMA_API,
            type: "json",
            src: this.model.get("api")[this.PANORAMA_API]
          }, {
            id: this.SUBTHEMES_API,
            type: "json",
            src: this.model.get("api")[this.SUBTHEMES_API]
          }
        ];
        this._queue.setMaxConnections = 1;
        this._queue.installPlugin(createjs.Sound);
        return this._queue.loadManifest(this._manifestArray);
      },
      toggleSubmenu: function (show) {
        if (show == null) {
          show = false;
        }
        this.clearTimeouts();
        $(".link").removeClass("flash");
        if (this._subMenuView) {
          if (show) {
            if (this._currentView && this._filmView) {
              if (this._currentView.isOpen() || this._filmView.isOpen()) {
                return this._subMenuView.open();
              }
            }
          } else {
            return this._subMenuView.close();
          }
        }
      },
      fadeSound: function (number, miliseconds) {
        if (!this._UIView) {
          return;
        }
        return this._UIView.fadeSound(number, miliseconds);
      },
      clearTimeouts: function () {
        return window.isMobile();
        clearTimeout(this._initFlashTimeoutA);
        clearTimeout(this._initFlashTimeoutB);
        clearTimeout(this._initFlashTimeoutC);
        clearTimeout(this._initFlashTimeoutD);
        return console.log('clearTimeouts page theme');
      },
      destroy: function () {
        this.clearTimeouts();
        $(".link").removeClass("flash");
        $(window).off("resize.pageThemeView");
        if (this._viewOpenTimeoutID != null) {
          clearTimeout(this._viewOpenTimeoutID);
        }
        this.args = null;
        this._pending = null;
        this._$subthemes = null;
        this._$error = null;
        if (this._queue) {
          this._queue.removeAllEventListeners();
          this._queue.removeAll();
          this._queue = null;
        }
        if (this._panoramaView) {
          this._panoramaView.off("ready");
          this._panoramaView.destroy();
          this._panoramaView = null;
        }
        if (this._subthemeViews) {
          _.each(this._subthemeViews, function (view) {
            view.off("ready");
            view.off("closed");
            view.off("play");
            view.off("subtheme");
            return view.destroy();
          });
          this._subthemeViews = null;
        }
        if (this._filmView) {
          this._filmView.off("ready");
          this._filmView.off("ended");
          this._filmView.off("closed");
          this._filmView.destroy();
          this._filmView = null;
        }
        if (this._UIView) {
          this._UIView.off("subtheme");
          this._UIView.off("ready");
          this._UIView.destroy();
          this._UIView = null;
        }
        if (this._subMenuView) {
          this._subMenuView.off("subtheme");
          this._subMenuView.off("ready");
          this._subMenuView.destroy();
          this._subMenuView = null;
        }
        this.remove();
        return this.off();
      },
      returnToLanding: function () {
        this._currentView.close();
        this._filmView.close();
        return this.toggleSubmenu();
      },
      _onLoadProgress: function (target, type, loaded, total, progress, totalItems, listener) {
        if (this._manifestArray.length < totalItems) {
          return this.trigger("progress", loaded, total, progress);
        } else {
          return this.trigger("progress", loaded * 0.03);
        }
      },
      _onLoadError: function (target, type, item, error, listener) {
        return this.trigger("error", ["There's been an error loading the assets", error, type, item].join(" "));
      },
      _onDataReady: function (target, type, listener) {
        var i;
        this._queue.removeEventListener("complete", listener);
        console.log('here2:', this._queue.getResult(this.INTRO_API));
        if (typeof this._queue.getResult(this.INTRO_API)[0]["nid"] != 'undefined') {
          $('meta[property="og:nid"]').attr('content', this._queue.getResult(this.INTRO_API)[0]["nid"]);
        }
        this.$el.html(_.template(templateHTML, this._queue.getResult(this.INTRO_API)[0]));
        this._$error = this.$(".error-message");
        $(window).on("resize.pageThemeView", (function (_this) {
          return function (event) {
            return _this._onResize();
          };
        })(this));
        this._subthemeViews = [];
        this._pendingSubthemeViews = [];
        this._subthemesAPI = this._queue.getResult(this.SUBTHEMES_API);
        this._$subthemes = this.$(".subthemes-section");
        i = 0;
        return _.each(this._subthemesAPI, (function (_this) {
          return function (o) {
            var view;
            view = new SubthemeView({
              data: o,
              subsubnid: _this._subsubnid,
              collection: _this._subthemesAPI,
              slideshow: _this.model.get("api")[_this.SLIDESHOW_API],
              index: i++,
              queue: _this._queue
            });
            view.$el.appendTo(_this._$subthemes).hide();
            view.on("dataLoaded", _this._onSubthemeDataLoaded, _this);
            _this._pendingSubthemeViews.push(view);
            return _this._subthemeViews.push(view);
          };
        })(this));
      },
      _onSlideshowDataReady: function () {
        var $subHeader, subtheme, _i, _len, _ref;
        this._queue.addEventListener("complete", this._onAssetsReady, this);
        this._pending = [];
        _ref = this._subthemeViews;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          subtheme = _ref[_i];
          subtheme.loadAssets();
          if (!subtheme.isReady()) {
            subtheme.on("ready", this._onViewReady, this);
            this._pending.push(subtheme);
          }
        }
        this._filmView = new VideoView({
          el: this.$(".video-player-section"),
          src: this._subthemeViews[0].model.get("video"),
          captionsrc: this._subthemeViews[0].model.get("captions")
        });
        this._filmView.$el.hide();
        this._filmView.on("ended", this._onVideoEnded, this);
        this._filmView.on("closed", this._onVideoClosed, this);
        this._filmView.on("slide", this._onVideoSlideClick, this);
        this._filmView.on("arrow", this._onVideoNavClick, this);
        if (!this._filmView.isReady()) {
          this._filmView.on("ready", this._onViewReady, this);
          this._pending.push(this._filmView);
        }
        this._panoramaView = new PanoramaView({
          el: this.$(".panorama-section"),
          data: this._queue.getResult(this.PANORAMA_API)[0],
          queue: this._queue
        });
        this._panoramaView.$el.hide();
        if (!this._panoramaView.isReady()) {
          this._panoramaView.on("ready", this._onViewReady, this);
          this._pending.push(this._panoramaView);
        }
        if (this._panoramaView.audioError()) {
          this._onAudioError(this._panoramaView, this._panoramaView.audioError());
        }
        this._UIView = new ThemeUIView({
          el: this.$(".theme-ui-section"),
          data: this._subthemesAPI,
          subthemeViews: this._subthemeViews,
          panorama: this._panoramaView
        });
        this._UIView.$el.hide();
        this._UIView.on("subtheme", this._onSubthemeButtonClicked, this);
        if (!this._UIView.isReady()) {
          this._UIView.on("ready", this._onViewReady, this);
          this._pending.push(this._UIView);
        }
        $subHeader = $("#sub-header");
        $subHeader.html("");
        this._subMenuView = new SubthemeSubmenuView({
          data: this._subthemesAPI
        });
        this._subMenuView.$el.hide().appendTo($subHeader);
        this._subMenuView.on("subtheme", this._onSubthemeButtonClicked, this);
        if (!this._subMenuView.isReady()) {
          this._subMenuView.on("ready", this._onViewReady, this);
          return this._pending.push(this._subMenuView);
        }
      },
      _onAssetsReady: function (target, type) {
        return console.log(this._queue);
      },
      _onSubthemeDataLoaded: function (view) {
        this._pendingSubthemeViews.splice(this._pendingSubthemeViews.indexOf(view), 1);
        view.off("dataLoaded", this._onSubthemeDataLoaded);
        if (this._pendingSubthemeViews.length) {
          return;
        }
        delete this._pendingSubthemeViews;
        return this._onSlideshowDataReady();
      },
      _onViewReady: function (view) {
        this._pending.splice(this._pending.indexOf(view), 1);
        view.off("ready", this._onViewReady);
        if (this._pending.length) {
          return;
        }
        delete this._pending;
        this._onResize();
        if (this._panoramaView) {
          this._panoramaView.open();
        }
        if (this._UIView) {
          this._UIView.open();
        }
        setTimeout((function (_this) {
          return function () {
            var i, subtheme, theme, _i, _len, _ref, _results;
            subtheme = _this.model.get("subnid");
            _ref = _this._subthemesAPI;
            _results = [];
            for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
              theme = _ref[i];
              if (subtheme === theme.nid) {
                _this._onSubthemeButtonClicked(i);
                break;
              } else {
                _results.push(void 0);
              }
            }
            return _results;
          };
        })(this), 1000);
        return this.trigger("ready", this);
      },
      _onResize: function () {
        if (this._panoramaView != null) {
          this._panoramaView.resize();
        }
        if (this._UIView != null) {
          this._UIView.resize();
        }
        if (this._filmView != null) {
          return this._filmView.resize();
        }
      },
      _onVideoNavClick: function (direction) {
        console.log('@_currentView', this._currentView);
        if (this._currentView != null) {
          if (direction === "previous") {
            return this._currentView.onPrevClick();
          } else {
            if (this._currentView.isFinal()) {
              return this.returnToLanding();
            } else {
              return this._currentView.onNextClick();
            }
          }
        }
      },
      _onVideoSlideClick: function (index) {
        this._currentView.on("closed", this._onSubViewClosed, this);
        this._currentView.on("play", this._onSubViewPlay, this);
        if ((this._currentView != null) && index >= 0) {
          this._currentView.returnAndOpenSlide(index);
        }
        return this._filmView.close(false);
      },
      _onSubthemeButtonClicked: function (index) {
        var model;
        this._subthemeIndex = index;
        if (this._UIView != null) {
          if (this._UIView.isOpen()) {
            this._UIView.close();
            this._UIView.zoomInToButton(index);
          }
        }
        this._onVideoEnded(false);
        if (this._currentView != null) {
          this._onSubViewClosed(this._currentView, false);
        }
        model = this._UIView.collection.at(index);
        this._currentView = this._subthemeViews[index];
        this._currentView.on("closed", this._onSubViewClosed, this);
        this._currentView.on("play", this._onSubViewPlay, this);
        this._currentView.on("subtheme", this._onSubthemeButtonClicked, this);
        if (this._viewOpenTimeoutID != null) {
          clearTimeout(this._viewOpenTimeoutID);
        }
        this._viewOpenTimeoutID = setTimeout((function (_this) {
          return function () {
            return _this._currentView.open();
          };
        })(this), this._UIView.ZOOM_IN_DURATION * .3);
        if (this._subMenuView != null) {
          this._subMenuView.setActive(index);
          if (window.isMobile()) {
            return this._subMenuView.open();
          } else {
            this._initFlashTimeoutA = delay(3000, (function (_this) {
              return function () {
                return $(".link.selected").addClass("flash");
              };
            })(this));
            this._initFlashTimeoutB = delay(3500, (function (_this) {
              return function () {
                if (_this._subMenuView != null) {
                  return _this._subMenuView.open();
                }
              };
            })(this));
            this._initFlashTimeoutC = delay(6500, (function (_this) {
              return function () {
                if (_this._subMenuView != null) {
                  return _this._subMenuView.close("slow");
                }
              };
            })(this));
            return this._initFlashTimeoutD = delay(7500, (function (_this) {
              return function () {
                return $(".link").removeClass("flash");
              };
            })(this));
          }
        }
      },
      _onSubViewPlay: function (view) {
        view.off("closed");
        view.off("play");
        view.close(this.FADE_DURATION, true);
        this.toggleSubmenu();
        return delay(this.FADE_DURATION, (function (_this) {
          return function () {
            var model;
            model = view.currentSlide.model;
            _this._filmView.setVideo(model.get("video"), model.get("captions"), {
              "nid": model.get("nid"),
              "title": model.get("title"),
              "description": model.get("description"),
              "image": model.get("image")
            });
            _this._filmView.setNavigation(view.getNavigation());
            return _this._filmView.open();
          };
        })(this));
      },
      _onSubViewClosed: function (view, zoomOut) {
        if (zoomOut == null) {
          zoomOut = true;
        }
        view.off("closed");
        view.off("open");
        view.off("play");
        view.off("subtheme");
        if (zoomOut) {
          this._UIView.zoomOut();
          this._UIView.open();
          return this.toggleSubmenu();
        } else {
          return view.close(this.FADE_DURATION, true);
        }
      },
      _onVideoClosed: function (view) {
        this._currentView.close(this.FADE_DURATION, true);
        this._UIView.zoomOut();
        this._UIView.open();
        return this.toggleSubmenu();
      },
      _onVideoEnded: function (zoomUI) {
        if (zoomUI == null) {
          zoomUI = true;
        }
        return this._filmView.close(zoomUI);
      },
      _onAudioError: function (view, tech) {
        var msg;
        if (tech === "flash") {
          msg = this.$("#flash-audio-error-html").html();
        }
        return this._showError(msg);
      },
      _showError: function (msg) {
        return this._$error.html(msg).fadeIn();
      }
    });
  });

}).call(this);
