// Generated by CoffeeScript 1.8.0

/*
PANORAMA UI VIEW
  Args:
    data : Array of objects with SubthemeModel structure
    panorama : PanoramaView

  Triggers:
    "sound" : function(boolean) when sound switch is clicked
    "subtheme": function(index) when a subtheme button is clicked
    "resources" : function() when subtheme button is clicked
    "about" : function() when about button is clicked
 */

(function() {
  define(["jquery", "underscore", "backbone", "modernizr", "soundjs", "tweenlite", "js/experience/models/subthemeModel", "js/memorial/views/sharingBoxView", "text!partials/experience/_subthemebutton.tpl.html", "text!partials/experience/_themeui.html"], function($, _, Backbone, Modernizr, soundjs, TweenLite, SubthemeModel, SharingBoxView, buttonTemplateHTML, HTML) {
    return Backbone.View.extend({
      OPEN_DURATION: 1000,
      CLOSE_DURATION: 1000,
      ZOOM_IN_DURATION: 2000,
      ZOOM_OUT_DURATION: 2000,
      MAX_VOLUME: 1,
      className: "panorama-ui-view",
      events: function() {
        var events;
        events = {
          "click .sound-switch": "_onSoundSwitched",
          "click .resources, .about, .subtheme-button": "_onUIClick"
        };
        if (Modernizr.mobile) {
          events["click .arrow-block .arrow"] = "_onArrowClick";
        } else {
          events["mouseover .arrow-block .arrow"] = "_onArrowMouseOver";
          events["mouseout .arrow-block .arrow"] = "_onArrowMouseOut";
        }
        return events;
      },
      isReady: function() {
        return this._ready || false;
      },
      isOpen: function() {
        return this._isOpen;
      },
      hasAudioEnabled: function() {
        return !this._$soundSwitch.hasClass("off");
      },
      resize: function() {
        return this._updateArrows();
      },
      open: function() {
        if (this._isOpen) {
          return;
        }
        this._isOpen = true;
        this.$el.stop().fadeIn(this.OPEN_DURATION);
        if (this.hasAudioEnabled()) {
          return this.fadeSound(this.MAX_VOLUME);
        }
      },
      close: function() {
        if (!this._isOpen) {
          return;
        }
        this._isOpen = false;
        this.$el.stop().fadeOut(this.CLOSE_DURATION);
        return this.fadeSound(0);
      },
      zoomInToButton: function(index, miliseconds, onComplete, onCompleteParams) {
        var $button, bounds, pos;
        if (miliseconds == null) {
          miliseconds = this.ZOOM_IN_DURATION;
        }
        if (index >= 0) {
          $button = $(this._subthemeButtons[index]);
          this._lastCoords = this._panoramaView.getNormalCoords();
          this._panoramaView.enableMouse(false);
          this.undelegateEvents();
          bounds = this._panoramaView.getBounds();
          pos = $button.position();
          return this._panoramaView.panTo({
            z: 2.5,
            x: (pos.left + $button.width() * .5) / bounds.width,
            y: (pos.top + $button.height() * .5) / bounds.height
          }, miliseconds, null, (function(_this) {
            return function() {
              _this._panoramaView.close();
              if (onComplete != null) {
                return onComplete.apply(_this, onCompleteParams);
              }
            };
          })(this));
        }
      },
      zoomOut: function(miliseconds, onComplete, onCompleteParams) {
        if (miliseconds == null) {
          miliseconds = this.ZOOM_IN_DURATION;
        }
        this._panoramaView.enableMouse(true);
        this._panoramaView.open();
        return this._panoramaView.panTo({
          z: this._lastCoords.z,
          x: this._lastCoords.x,
          y: this._lastCoords.y
        }, this.ZOOM_OUT_DURATION, null, (function(_this) {
          return function() {
            _this.delegateEvents();
            _this._panoramaView.enableMouse(true);
            if (onComplete != null) {
              return onComplete.apply(_this, onCompleteParams);
            }
          };
        })(this));
      },
      fadeSound: function(number, miliseconds) {
        if (miliseconds == null) {
          miliseconds = 1000;
        }
        this._sound.volume = createjs.Sound.getVolume();
        if (this._sound.volume === number) {
          return;
        }
        return TweenLite.to(this._sound, miliseconds / 1000, {
          volume: number,
          onChange: (function(_this) {
            return function(event) {
              return createjs.Sound.setVolume(_this._sound.volume);
            };
          })(this)
        });
      },
      initialize: function(args) {
        var i, tpl;
        this.collection = new Backbone.Collection(args.data, {
          model: SubthemeModel
        });
        this._panoramaView = args.panorama;
        this._panoramaView.on("render", this._onPanoramaRender, this);
        this._subthemeViews = args.subthemeViews;
        this.$el.html(HTML);
        if (!this.$el.hasClass(this.className)) {
          this.$el.addClass(this.className);
        }
        this.sharingView = new SharingBoxView({
          el: this.$(".sharing-component"),
          model: new Backbone.Model({
            url: window.location.href,
            title: window.document.title
          })
        });
        this.sharingView.setContents({
          "nid": $('meta[property="og:nid"]').attr('content')
        });
        this._$soundSwitch = this.$(".sound-switch");
        this._$leftArrow = this.$(".arrow-block.left .arrow");
        this._$rightArrow = this.$(".arrow-block.right .arrow");
        this._$subthemeMenu = this.$(".subtheme-menu");
        i = 0;
        this._subthemeButtons = [];
        tpl = _.template(buttonTemplateHTML);
        this.collection.each((function(_this) {
          return function(model) {
            var $button;
            $button = $(tpl(model.toJSON()));
            $button.css({
              "left": model.get("x") * 100 + "%",
              "top": model.get("y") * 100 + "%"
            });
            _this._$subthemeMenu.append($button[0]);
            _this._subthemeButtons.push($button[0]);
            if (_this._subthemeViews[i].isVideoOnly()) {
              $button.find(".is-hidden").removeClass("is-hidden");
            }
            return i++;
          };
        })(this));
        this._sound = {
          volume: createjs.Sound.getVolume()
        };
        createjs.Sound.setVolume(this.MAX_VOLUME);
        return this._ready = true;
      },
      destroy: function() {
        this._panoramaView.off("render");
        this.sharingView.destroy();
        this._isOpen = null;
        this._lastCoords = null;
        this._panoramaView = null;
        this._sound = null;
        this._$soundSwitch = null;
        this._$leftArrow = null;
        this._$rightArrow = null;
        this._$subthemeMenu = null;
        this._subthemeButtons = null;
        this.sharingView = null;
        this.remove();
        return this.off();
      },
      _onArrowClick: function(event) {
        var coords, dw;
        dw = this.$el.width() / this._panoramaView.getBounds().width;
        coords = this._panoramaView.getNormalCoords();
        if (event.currentTarget === this._$leftArrow[0]) {
          coords.x -= dw;
          this._$rightArrow.fadeIn();
          if (coords.x <= 0) {
            this._$leftArrow.fadeOut();
          }
        } else {
          coords.x += dw;
          this._$leftArrow.fadeIn();
          if (coords.x >= 1) {
            this._$rightArrow.fadeOut();
          }
        }
        return this._panoramaView.panTo(coords, 700);
      },
      _onArrowMouseOver: function(event) {
        var coords, dx, onChange;
        coords = this._panoramaView.getNormalCoords();
        if (event.currentTarget === this._$leftArrow[0]) {
          dx = coords.x;
          coords.x = 0;
        } else {
          dx = 1 - coords.x;
          coords.x = 1;
        }
        onChange = (function(_this) {
          return function() {
            return _this._updateArrows();
          };
        })(this);
        return this._panoramaView.panTo(coords, dx * 3000, onChange);
      },
      _onArrowMouseOut: function(event) {
        return this._panoramaView.stopPanning();
      },
      _updateArrows: function() {
        var coords;
        coords = this._panoramaView.getNormalCoords();
        if (coords.x + coords.w * .5 > 0.9) {
          this._$rightArrow.fadeOut();
        } else {
          this._$rightArrow.fadeIn();
        }
        if (coords.x - coords.w * .5 < 0.1) {
          return this._$leftArrow.fadeOut();
        } else {
          return this._$leftArrow.fadeIn();
        }
      },
      _onSoundSwitched: function(event) {
        var value, vol;
        value = this._$soundSwitch.hasClass("off");
        if (value) {
          this._$soundSwitch.removeClass("off");
        } else {
          this._$soundSwitch.addClass("off");
        }
        vol = value ? this.MAX_VOLUME : 0;
        this.fadeSound(vol, 500);
        return this.trigger("sound", value);
      },
      _onPanoramaRender: function(view) {
        var bounds;
        bounds = this._panoramaView.getBounds();
        if (!bounds) {
          return;
        }
        return this._$subthemeMenu = this.$(".subtheme-menu").css({
          width: bounds.width + "px",
          height: bounds.height + "px",
          left: bounds.x + "px",
          top: bounds.y + "px"
        });
      },
      _onUIClick: function(event) {
        var index;
        index = this._subthemeButtons.indexOf(event.currentTarget);
        if (index >= 0) {
          return this.trigger("subtheme", index);
        } else if ($(event.currentTarget).hasClass("resources")) {
          return this.trigger("resources");
        } else if ($(event.currentTarget).hasClass("about")) {
          return this.trigger("about");
        }
      }
    });
  });

}).call(this);
