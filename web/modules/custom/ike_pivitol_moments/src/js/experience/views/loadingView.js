// Generated by CoffeeScript 1.8.0

/*
LOADING VIEW COMPONENT
Args: data: json with structure of IntroModel
 */

(function() {
  define(["jquery", "underscore", "backbone", "js/experience/models/introModel", "text!partials/experience/_loader.tpl.html"], function($, _, Backbone, IntroModel, templateHTML) {
    return Backbone.View.extend({
      className: "loading-view",
      isReady: function() {
        return this._ready || false;
      },
      resize: function() {
        var h, ir, r, w;
        w = $(window).width();
        h = $(window).height();
        r = w / h;
        ir = this._$image.width() / this._$image.height();
        if (r > ir) {
          return this._$image.css({
            "width": w + "px",
            "height": w / ir + "px",
            "margin-top": (h - w / ir) * .5 + "px",
            "margin-left": "0px"
          });
        } else {
          return this._$image.css({
            "width": h * ir + "px",
            "height": h + "px",
            "margin-top": "0px",
            "margin-left": (w - h * ir) * .5 + "px"
          });
        }
      },
      setProgress: function(num) {
        var margin;
        margin = this._margin * num;
        this._$number.text(parseInt(num * 100) + "%").stop().animate({
          "margin": "" + (this._margin + margin) + "px"
        });
        return this._$frame.stop().animate({
          "margin-top": -margin + "px",
          "margin-left": -margin + "px"
        });
      },
      open: function() {
        return this.$el.fadeIn();
      },
      close: function() {
        this.$(".loading-frame").fadeOut(1000);
        return this.$el.fadeOut(4000);
      },
      initialize: function(args) {
        var m;
        this.model = new IntroModel(args.data);
        this.$el.html(_.template(templateHTML, this.model.toJSON()));
        if (!this.$el.hasClass(this.className)) {
          this.$el.addClass(this.className);
        }
        this._$image = this.$(".image-container");
        this._$number = this.$(".number");
        m = this._$number.css("margin-top") || "0";
        this._margin = parseInt(m.match(/\d+/)[0]);
        return this._$frame = this.$(".loading-frame");
      }
    });
  });

}).call(this);
