// Generated by CoffeeScript 1.8.0

/*
PANORAMA UI VIEW
  Args:
    data : Array of objects with SubthemeModel structure
    panorama : PanoramaView

  Triggers:
    "sound" : function(boolean) when sound switch is clicked
    "subtheme": function(index) when a subtheme button is clicked
    "resources" : function() when subtheme button is clicked
    "about" : function() when about button is clicked
 */

(function() {
  define(["jquery", "underscore", "backbone", "modernizr", "js/experience/models/subthemeModel", "text!partials/experience/_subthemesubmenubutton.tpl.html"], function($, _, Backbone, Modernizr, SubthemeModel, buttonTemplateHTML) {
    return Backbone.View.extend({
      OPEN_DURATION: 1000,
      CLOSE_DURATION: 250,
      className: "sub-theme-ul",
      tagName: "ul",
      currentIndex: -1,
      events: function() {
        var events;
        return events = {
          "click li": "_onUIClick",
          "mouseleave": "close",
          "mouseenter": "open"
        };
      },
      initialize: function(args) {
        var tpl, width;
        this.collection = new Backbone.Collection(args.data, {
          model: SubthemeModel
        });
        this._subthemeButtons = [];
        tpl = _.template(buttonTemplateHTML);
        width = 100 / this.collection.length;
        this.collection.each((function(_this) {
          return function(model) {
            var $button, $title, image, prefix, title;
            $title = $("<span>" + model.get("title") + "</span>");
            if ($title.find('h2').length > 0) {
              prefix = "<img src='/modules/custom/ike_pivitol_moments/src/img/ui/";
              image = prefix + "watch_film_icon_small.png' class='off'>";
              image += prefix + "watch_film_icon_small_white.png' class='on'>";
              title = $title.find('h2').text() + ":<br><div class='title-play'>" + $title.find('p').text() + image + "</div>";
            } else {
              title = model.get("title");
            }
            model.set("title", title);
            $button = $(tpl(model.toJSON()));
            $button.css({
              "width": width + "%"
            });
            _this.$el.append($button[0]);
            return _this._subthemeButtons.push($button[0]);
          };
        })(this));
        this.$el.attr('style', 'visibility:hidden');
        return this._ready = true;
      },
      isReady: function() {
        return this._ready || false;
      },
      open: function() {
        if (this._isOpen) {
          return;
        }
        this._isOpen = true;
        return this.$el.attr('style', 'visibility:show').addClass('active');
      },
      close: function(speed) {
        if (speed == null) {
          speed = this.CLOSE_DURATION;
        }
        if (!this._isOpen) {
          return;
        }
        this._isOpen = false;
        this.$el.removeClass('active');
        return this.$el.one('webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend', (function(_this) {
          return function() {
            if (!_this.$el.hasClass('active')) {
              return _this.$el.attr('style', 'visibility:hidden');
            }
          };
        })(this));
      },
      deActive: function() {
        return this.$el.find('.active').removeClass('active');
      },
      setActive: function(index) {
        this.deActive();
        $(this._subthemeButtons[index]).addClass('active');
        return this.currentIndex = index;
      },
      _onUIClick: function(event) {
        var index;
        index = this._subthemeButtons.indexOf(event.currentTarget);
        if (index !== this.currentIndex && (index >= 0)) {
          this.trigger("subtheme", index);
          return this.currentIndex = index;
        }
      },
      destroy: function() {
        this._isOpen = null;
        this._subthemeButtons = null;
        this.remove();
        return this.off();
      }
    });
  });

}).call(this);
