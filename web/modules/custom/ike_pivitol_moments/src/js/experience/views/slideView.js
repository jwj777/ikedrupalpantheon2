// Generated by CoffeeScript 1.8.0

/*
SLIDE VIEW
Args:
  data : subthemeModel or json with subthemeModel structure
  queue : optional reference to createjs.LoadQueue, in case preloading is centralized
Triggers:
  "open" : function (view) when it's open
  "closed" : function (view) when it's closed
  "play" : function (view) when play button is clicked
 */

(function() {
  define(["jquery", "underscore", "backbone", "tweenjs", "dotdot", "js/experience/models/slideModel", "text!partials/experience/_slide.tpl.html"], function($, _, Backbone, tweenjs, DotDot, SlideModel, templateHTML) {
    return Backbone.View.extend({
      OPEN_TWEEN_DURATION: 2000,
      CLOSE_TWEEN_DURATION: 1000,
      COLLAPSE_HEIGHT: 80,
      tagName: "section",
      className: "slide-view",
      events: {
        "click .play-film": "_onPlayFilm",
        "click .panel-toggle": "_onPanelToggleClick",
        "click .thumbnail-panel img": "_onThumbnailClick"
      },
      isReady: function() {
        return this._ready || false;
      },
      toggle: function() {
        if (this._isOpen) {
          return this.close(this.CLOSE_TWEEN_DURATION);
        } else {
          return this.open(this.OPEN_TWEEN_DURATION);
        }
      },
      open: function(duration) {
        var delay, dur;
        if (duration == null) {
          duration = 0;
        }
        if (this._isOpen) {
          return;
        }
        this._isOpen = true;
        this.trigger("open", this);
        if (this._isPhoto) {
          delay = this.CLOSE_TWEEN_DURATION;
          dur = this.OPEN_TWEEN_DURATION;
          this.$el.stop().fadeIn(dur);
          this.$image.stop().css({
            height: "80%",
            margin: "5%"
          }).animate({
            height: "100%",
            margin: 0
          }, dur * 0.5);
          this.$frame.stop().delay(delay).fadeIn(dur * 0.5);
          return window.delay(delay, (function(_this) {
            return function() {
              if (!_this.panelHeight) {
                _this.panelHeight = _this.$framePanel.height();
              }
              if (_this.panelHeight > _this.COLLAPSE_HEIGHT) {
                _this.$framePanel.height(_this.COLLAPSE_HEIGHT);
              } else {
                _this.$panelToggle.remove();
              }
              _this.$framePanel.dotdotdot().css("overflow", "visible");
              _this.$panelToggle.find("img").first().addClass("is-hidden");
              _this.$panelToggle.find("img").last().removeClass("is-hidden");
              return _this._isCollapsed = true;
            };
          })(this));
        } else {
          return this._onPlayFilm();
        }
      },
      close: function(duration) {
        if (duration == null) {
          duration = 0;
        }
        if (!this._isOpen) {
          return;
        }
        this._isOpen = false;
        this.trigger("closed", this);
        if (this._isPhoto) {
          this.$el.stop().fadeOut(this.CLOSE_TWEEN_DURATION);
          $("#main-header").stop().fadeIn();
          this.$frame.stop().fadeOut();
          this.$zoomOverlay.stop().fadeOut();
          return this.$close.hide();
        }
      },
      resize: function() {},
      initialize: function(args) {
        this._isCollapsed = true;
        this._isPhoto = this.model.isPhoto();
        this._queue = args.queue || new createjs.LoadQueue(false);
        return this._loadAssets();
      },
      destroy: function() {
        this.$close.unbind();
        this.$image = null;
        this.$title = null;
        this.$description = null;
        this.$links = null;
        this.$frame = null;
        this.$framePanel = null;
        this.$panelToggle = null;
        this.$zoomOverlay = null;
        this.$close = null;
        this._assets = null;
        this._fileCompleteHandler = null;
        this.$zoomOverlay.off();
        this._queue.removeAllEventListeners();
        this._queue.removeAll();
        this._queue = null;
        this.remove();
        return this.off();
      },
      isOpen: function() {
        return this._isOpen;
      },
      isPhoto: function() {
        return this._isPhoto;
      },
      _loadAssets: function() {
        var zoom, _i, _j, _len, _len1, _ref, _ref1;
        this._assets = [];
        if (this.model.get("thumbnail") && !this._queue.getResult(this.model.get("thumbnail"))) {
		console.log('thumbnail',this.model.get("thumbnail"));
          this._assets.push({
            src: this.model.get("thumbnail"),
            type: "image"
          });
        }
        if (this.model.get("image") && !this._queue.getResult(this.model.get("image"))) {
		console.log('test1',this.model.get("image"));
          this._assets.push({
            src: this.model.get("image"),
            type: "image"
          });
        }
        if (this.model.get("zoom_image").length && !this._queue.getResult(this.model.get("zoom_image")[0])) {
          _ref = this.model.get("zoom_image");
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            zoom = _ref[_i];
	    fixedzoom = zoom;
		  console.log('zoom',fixedzoom);
            this._assets.push({
	      src: fixedzoom,
              type: "image"
            });
          }
        }
        if (this.model.get("zoom_image_thumb").length && !this._queue.getResult(this.model.get("zoom_image_thumb")[0])) {
          _ref1 = this.model.get("zoom_image_thumb");
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            zoom = _ref1[_j];
		  console.log('zoom2',zoom);
            this._assets.push({
              src: zoom,
              type: "image"
            });
          }
        }
        if (this.model.get("captions") && !this._queue.getResult(this.model.get("captions"))) {
          this._assets.push({
            src: this.model.get("captions"),
            type: "text"
          });
        }
        if (this._assets.length) {
          this._fileCompleteHandler = (function(_this) {
            return function(event) {
              return _this._onItemComplete(event.item);
            };
          })(this);
          this._queue.addEventListener("error", this._fileCompleteHandler);
          this._queue.addEventListener("fileload", this._fileCompleteHandler);
          return this._queue.loadManifest(this._assets);
        } else {
          return this._build();
        }
      },
      _onItemComplete: function(item) {
        var index;
        index = this._assets.indexOf(item);
        if (index >= 0) {
          this._assets.splice(index, 1);
        }
        if (this._assets.length) {
          return;
        }
        delete this._assets;
        this._queue.removeEventListener("error", this._fileCompleteHandler);
        this._queue.removeEventListener("fileload", this._fileCompleteHandler);
        return this._build();
      },
      _build: function() {
        this.$el.html(_.template(templateHTML, this.model.toJSON()));
        if (!this._isPhoto) {
          this.$el.css("visibility", "hidden");
        }
        this.$image = this.$el.find(".main-image");
        this.$frame = this.$el.find(".subtheme-frame").hide();
        this.$framePanel = this.$el.find(".subtheme-content-panel .description");
        this.$panelToggle = this.$el.find(".panel-toggle");
        this.$zoomOverlay = this.$el.find(".zoom-image-overlay");
        this.$title = this.$el.find(".title");
        this.$description = this.$el.find(".description");
        this.$links = this.$el.find(".link");
        this.$close = this.$el.find(".close-button").hide();
        this.$title.html(_.unescape(this.model.get("title")));
        this.$close.click((function(_this) {
          return function() {
            return _this._onTelegraphClose();
          };
        })(this));
        this._ready = true;
        return this.trigger("ready", this);
      },
      _onPanelToggleClick: function() {
        var h;
        h = this._isCollapsed ? this.panelHeight : this.COLLAPSE_HEIGHT;
        if (this._isCollapsed) {
          this.$framePanel.trigger("destroy").html(this.model.get("description"));
        }
        this.$framePanel.stop().animate({
          "height": h
        }, {
          "complete": (function(_this) {
            return function() {
              console.log('_onPanelToggleClick', _this._isCollapsed);
              if (_this._isCollapsed) {
                return _this.$framePanel.dotdotdot().css("overflow", "visible");
              } else {
                return _this.$framePanel.css("overflow", "auto");
              }
            };
          })(this)
        });
        this.$panelToggle.find("img").toggleClass("is-hidden");
        return this._isCollapsed = !this._isCollapsed;
      },
      _onPlayFilm: function() {
        return this.trigger("play", this);
      },
      _onClose: function() {
        return this.close(this.CLOSE_TWEEN_DURATION);
      },
      _onThumbnailClick: function(e) {
        var $w, largeImg, zoomImg;
        $("#main-header").stop().fadeOut();
        this.$el.parent().find(".carousel-indicators").stop().fadeOut();
        this.$el.parent().parent().append(this.$close);
        this.$close.show();
        this.$zoomOverlay.stop().fadeIn().removeClass("is-hidden");
        this.$zoomOverlay.find(".zoom-image").addClass("is-hidden");
        largeImg = $(e.currentTarget).data("image");
        zoomImg = this.$el.find("#" + largeImg).removeClass("is-hidden");
        $w = $(window);
        if (window.isMobile()) {
          $('.zoom-image-overlay').css({
            "overflow": "auto"
          });
          return $('.zoom-image-wrapper').css({
            "overflow": "auto"
          });
        } else {
          return this.$zoomOverlay.mousemove(function(e) {
            var maxY, perc, toY;
            maxY = zoomImg.height() - $w.height();
            perc = (e.pageY-50) / $w.height();
            if (perc < 0) {
              perc = 0;
            }
            toY = -maxY * perc;
            return zoomImg.css({
              "margin-top": toY+50
            });
          });
        }
      },
      _onTelegraphClose: function() {
        $("#main-header").stop().fadeIn();
        this.$el.parent().find(".carousel-indicators").stop().fadeIn();
        this.$zoomOverlay.stop().fadeOut();
        return this.$close.hide();
      }
    });
  });

}).call(this);
