// Generated by CoffeeScript 1.8.0

/*
SUBTHEME VIEW
Args:
  data : subthemeModel or json with subthemeModel structure
  queue : optional reference to createjs.LoadQueue, in case preloading is centralized
Triggers:
  "open" : function (view) when it's open
  "closed" : function (view) when it's closed
  "play" : function (view) when play button is clicked
 */

(function() {
  define(["jquery", "underscore", "backbone", "tweenjs", "js/experience/collection/slideCollection", "js/experience/models/subthemeModel", "js/experience/views/slideView", "js/libs/hammer.min", "text!partials/experience/_subtheme.tpl.html"], function($, _, Backbone, tweenjs, SlideCollection, SubthemeModel, SlideView, Hammer, templateHTML) {
    return Backbone.View.extend({
      OPEN_TWEEN_DURATION: 2000,
      CLOSE_TWEEN_DURATION: 1000,
      COLLAPSE_HEIGHT: 75,
      tagName: "section",
      className: "subtheme-view",
      autoDisplay: false,
      events: {
        "click .back-panorama, .close-button": "_onClose",
        "click .sections-nav.left": "onPrevClick",
        "click .sections-nav.right": "onNextClick",
        "click .panel-toggle": "_onPanelToggleClick",
        "click li": "_onBubbleClick"
      },
      isReady: function() {
        return this._ready || false;
      },
      toggle: function() {
        if (this._isOpen) {
          return this.close(this.CLOSE_TWEEN_DURATION);
        } else {
          return this.open(this.OPEN_TWEEN_DURATION);
        }
      },
      open: function(duration) {
        var delay, dur, self, timeOut;
        if (duration == null) {
          duration = 0;
        }
        if (this._isOpen) {
          return;
        }
        this._isOpen = true;
        this.trigger("open", this);
        delay = this.OPEN_TWEEN_DURATION * .5;
        dur = this.OPEN_TWEEN_DURATION - delay;
        this.$el.stop().fadeIn(this.OPEN_TWEEN_DURATION);
        $(document).bind('keydown', this._onKeyDown);
        if (window.isMobile()) {
          self = this;
          this.mc = new Hammer(this.$image.get(0));
          this.mc.get('pan').set({
            direction: Hammer.DIRECTION_ALL
          });
          timeOut = null;
          this.mc.on('panleft panright', function(ev) {
            var evType;
            evType = ev.type;
            if (timeOut != null) {
              clearTimeout(timeOut);
            }
            return timeOut = window.delay(300, function() {
              if ($('.zoom-image-overlay:visible').length) {
                return;
              }
              if (evType === 'panleft') {
                self.onNextClick();
              }
              if (evType === 'panright') {
                return self.onPrevClick();
              }
            });
          });
        }
        return window.delay(150, (function(_this) {
          return function() {
            var i, index, lh, nid, rh, slide, _i, _len, _ref;
            _this.$left = _this.$el.find(".sections-nav.left");
            _this.$right = _this.$el.find(".sections-nav.right");
            _this.$leftLabel = _this.$left.find(".label.narrow");
            _this.$rightLabel = _this.$right.find(".label.narrow");
            _this.$leftVideoLabel = _this.$left.find(".label.wide");
            _this.$rightVideoLabel = _this.$right.find(".label.wide");
            _this.$leftVideoIcon = _this.$left.find(".icon-video");
            _this.$rightVideoIcon = _this.$right.find(".icon-video");
            _this.$leftArrowIcon = _this.$left.find(".chevron");
            _this.$rightArrowIcon = _this.$right.find(".chevron");
            lh = (40 - parseInt(_this.$leftLabel.height())) * 0.5;
            rh = (40 - parseInt(_this.$rightLabel.height())) * 0.5;
            _this.$leftLabel.css("margin-top", lh);
            _this.$rightLabel.css("margin-top", rh);
            lh = (40 - parseInt(_this.$leftVideoLabel.height())) * 0.5;
            rh = (40 - parseInt(_this.$rightVideoLabel.height())) * 0.5;
            _this.$leftVideoLabel.css("margin-top", lh);
            _this.$rightVideoLabel.css("margin-top", rh);
            if (_this.model.get("index") !== 0 && _this.autoDisplay) {
              _this.$leftLabel.addClass("active");
              window.delay(4000, function() {
                return _this.$leftLabel.removeClass("active");
              });
            }
            index = 0;
            if (_this._subsubnid && _this._subsubnid > -1) {
              _ref = _this._slideShow;
              for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
                slide = _ref[i];
                nid = slide.model.get("nid");
                if (nid === _this._subsubnid) {
                  index = i;
                  break;
                }
              }
            }
            console.log('@_subsubnid', index, _this._subsubnid);
            return _this._openSlide(index, true);
          };
        })(this));
      },
      close: function(duration, forceClose) {
        if (duration == null) {
          duration = 0;
        }
        if (forceClose == null) {
          forceClose = false;
        }
        if (this._isOpen || forceClose) {
          this._isOpen = false;
          if (this.currentSlide) {
            this.currentSlide.close();
          }
          $(document).unbind('keydown', this._onKeyDown);
          if (this.mc != null) {
            this.mc.off('panleft panright');
            this.mc = null;
          }
          return this.$el.stop().fadeOut(this.CLOSE_TWEEN_DURATION, (function(_this) {
            return function() {
              return _this.trigger("closed", _this);
            };
          })(this));
        }
      },
      resize: function() {},
      initialize: function(args) {
        var manifest;
        this._isCollapsed = true;
        this.currentSlide = null;
        this._slideIndex = 0;
        this._subsubnid = args.subsubnid || -1;
        this._slideShow = [];
        this._slidesToLoad = [];
        this._queue = args.queue || new createjs.LoadQueue(false);
        this.collection = args.collection;
        this.model = new SubthemeModel(args.data);
        this.model.set("index", args.index);
        this.model.set("totalSubviews", this.collection.length);
        this.model.set("prevTitle", this._prevTitle());
        this.model.set("nextTitle", this._nextTitle());
        this.model.set("isFinalSlide", this._getNext() === -1);
        this.manifestURL = args.slideshow + this.model.id;
        manifest = [
          {
            type: "json",
            src: this.manifestURL
          }
        ];
        this._json = new createjs.LoadQueue(false);
        this._json.addEventListener("complete", (function(_this) {
          return function() {
            return _this.trigger("dataLoaded", _this);
          };
        })(this));
        this._json.loadManifest(manifest);
        return _.bindAll(this, '_onKeyDown');
      },
      destroy: function() {
        this.$image = null;
        this.$title = null;
        this.$description = null;
        this.$links = null;
        this.$frame = null;
        this._slideShow = null;
        this._slidesToLoad = null;
        this._fileCompleteHandler = null;
        this._json.removeAllEventListeners();
        this._json.removeAll();
        this._json = null;
        this._queue.removeAllEventListeners();
        this._queue.removeAll();
        this._queue = null;
        $(document).unbind('keydown', this._onKeyDown);
        if (this.mc != null) {
          this.mc.off('panleft panright');
          this.mc = null;
        }
        this.remove();
        return this.off();
      },
      isOpen: function() {
        return this._isOpen;
      },
      loadAssets: function(target, type, listener) {
        var slideResponse;
        slideResponse = new SlideCollection(this._json.getResult(this.manifestURL));
        this._slideShow = [];
        this._slidesToLoad = [];
        return slideResponse.each((function(_this) {
          return function(slide) {
            var slideView;
            slideView = new SlideView({
              model: slide,
              queue: _this._queue
            });
            slideView.on("ready", _this._onItemComplete, _this);
            slideView.on("play", _this._onPlayFilm, _this);
            _this._slideShow.push(slideView);
            return _this._slidesToLoad.push(slideView);
          };
        })(this));
      },
      returnAndOpenSlide: function(i) {
        if (i == null) {
          i = 0;
        }
        this.$el.stop().fadeIn(this.OPEN_TWEEN_DURATION);
        return this._openSlide(i);
      },
      _openSlide: function(i, forcedOpen) {
        if (i == null) {
          i = 0;
        }
        if (forcedOpen == null) {
          forcedOpen = false;
        }
        if (this._slideIndex === i && forcedOpen === false) {
          return;
        }
        if ((i < 0) || (i >= this._slideShow.length)) {
          return;
        }
        this._slideIndex = i;
        if (this._slideShow.length) {
          this.$carouselIndicators.find(".active").removeClass("active");
          this.$carouselIndicators.find("[data-index='" + this._slideIndex + "']").addClass("active");
          if (this.currentSlide) {
            this.currentSlide.off("previousArrow", this.onPrevClick, this);
            this.currentSlide.off("nextArrow", this.onNextClick, this);
            this.currentSlide.close();
          }
          this.currentSlide = this._slideShow[this._slideIndex];
          this.currentSlide.on("previousArrow", this.onPrevClick, this);
          this.currentSlide.on("nextArrow", this.onNextClick, this);
          this.currentSlide.open();
          if (this.currentSlide.isPhoto()) {
            return this._checkArrows(i);
          }
        }
      },
      _checkArrows: function(i) {
        var isFirst, isLast, isPhoto, nextModel, prevModel;
        isFirst = i === 0;
        isLast = i === this._slideShow.length - 1;
        if (isFirst) {
          if (this._getPrevious() === -1) {
            this.$left.hide();
          } else {
            this.$left.show();
            this.$leftLabel.show();
          }
          this.$leftVideoLabel.hide();
          this.$leftVideoIcon.hide();
        } else {
          this.$left.show();
          prevModel = this._slideShow[i - 1].model;
          isPhoto = prevModel.isPhoto();
          this.$leftLabel.hide();
          this.$leftArrowIcon.toggle(isPhoto);
          this.$leftVideoLabel.toggle(!isPhoto);
          this.$leftVideoIcon.toggle(!isPhoto);
        }
        if (isLast) {
          this.$rightLabel.show();
          this.$rightArrowIcon.show();
          this.$rightVideoLabel.hide();
          this.$rightVideoIcon.hide();
        } else {
          nextModel = this._slideShow[i + 1].model;
          isPhoto = nextModel.isPhoto();
          this.$rightLabel.hide();
          this.$rightArrowIcon.toggle(isPhoto);
          this.$rightVideoLabel.toggle(!isPhoto);
          this.$rightVideoIcon.toggle(!isPhoto);
        }
        return console.log('_checkArrows', i, 'isFirst', isFirst, 'isLast', isLast, '@_getNext()', this._getNext(), '_getPrevious()', this._getPrevious());
      },
      _onItemComplete: function(item) {
        var index;
        index = this._slidesToLoad.indexOf(item);
        if (index >= 0) {
          this._slidesToLoad.splice(index, 1);
        }
        if (this._slidesToLoad.length) {
          return;
        }
        delete this._slidesToLoad;
        this._json.removeEventListener("error", this._fileCompleteHandler);
        this._json.removeEventListener("fileload", this._fileCompleteHandler);
        return this._build();
      },
      _build: function() {
        var $li, i, slide, _i, _len, _ref;
        this.$el.html(_.template(templateHTML, this.model.toJSON()));
        if (!this.$el.hasClass(this.className)) {
          this.$el.addClass(this.className);
        }
        i = 0;
        this.$carouselIndicators = this.$el.find(".carousel-indicators");
        _ref = this._slideShow;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          slide = _ref[_i];
          this.$el.prepend(slide.$el.hide());
          if (this._slideShow.length > 1) {
            $li = $("<li data-index='" + i + "'></li>");
            this.$carouselIndicators.append($li);
            if (i === 0) {
              $li.addClass("active");
            }
            i++;
          }
        }
        this.$image = this.$el.find(".main-image");
        this.$frame = this.$el.find(".subtheme-frame");
        this.$framePanel = this.$el.find(".subtheme-content-panel .description");
        this.$links = this.$el.find(".link").hide();
        this.$controls = this.$el.find('.controls');
        this._ready = true;
        return this.trigger("ready", this);
      },
      _getPrevious: function() {
        var index, prev, total;
        index = this.model.get("index");
        total = this.model.get("totalSubviews");
        prev = index === 0 ? -1 : --index;
        return prev;
      },
      _getNext: function() {
        var index, next, total;
        index = this.model.get("index");
        total = this.model.get("totalSubviews");
        next = index === (total - 1) ? -1 : ++index;
        return next;
      },
      _prevTitle: function() {
        var prev;
        prev = this._getPrevious();
        if (prev !== -1) {
          return this._returnTitle(this.collection[prev]);
        } else {
          return "";
        }
      },
      _nextTitle: function() {
        var next;
        next = this._getNext();
        if (next !== -1) {
          return this._returnTitle(this.collection[next]);
        } else {
          return "";
        }
      },
      _returnTitle: function(model) {
        var $title, title;
        $title = $("<span>" + model.title + "</span>");
        if ($title.find('h2').length > 0) {
          title = $title.find('h2').text() + ":<br>" + $title.find('p').text();
        } else {
          title = model.title;
        }
        return title;
      },
      _onBubbleClick: function(e) {
        return this._openSlide($(e.currentTarget).data("index"));
      },
      onPrevClick: function() {
        if (this._slideIndex > 0) {
          return this._openSlide(this._slideIndex - 1);
        } else {
          if (this._getPrevious() !== -1) {
            return this.trigger("subtheme", this._getPrevious());
          }
        }
      },
      onNextClick: function() {
        var nextToLast;
        nextToLast = this._slideShow.length ? this._slideShow.length - 1 : 1000;
        if (this._slideIndex < nextToLast) {
          return this._openSlide(this._slideIndex + 1);
        } else {
          if (this._getNext() === -1) {
            return this._onClose();
          } else {
            return this.trigger("subtheme", this._getNext());
          }
        }
      },
      _onPlayFilm: function() {
        return this.trigger("play", this);
      },
      _onClose: function() {
        return this.close(this.CLOSE_TWEEN_DURATION, true);
      },
      _onKeyDown: function(e) {
        switch (e.which) {
          case 37:
            this.onPrevClick();
            break;
          case 39:
            this.onNextClick();
        }
        return e.preventDefault();
      },
      getNavigation: function() {
        this._checkArrows(this._slideIndex);
        return [this.$carouselIndicators.clone(), this.$controls.clone()];
      },
      isFinal: function() {
        var nextToLast;
        nextToLast = this._slideShow.length ? this._slideShow.length - 1 : 1000;
        return (this._slideIndex >= nextToLast) && (this._getNext() === -1);
      },
      isVideoOnly: function() {
        var model;
        model = this._slideShow[0].model;
        return model.isPhoto() === false;
      }
    });
  });

}).call(this);
