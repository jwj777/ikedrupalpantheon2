// Generated by CoffeeScript 1.8.0

/*
VIDEO VIEW
Args :
  src -> video url. Video player needs source to init with correct technology.
  captionsrc -> optional captions file url
  params -> optional video js. Supported are:
    "controls":true/false,
    "autoplay":true/false,
    "preload":"none"/"metadata"/"auto",
    "poster":"/path/to/image"
    "loop":true/false,
    "width":640,
    "height":480

Triggers :
   "play" -> (this)
   "pause" -> (this)
   "fullscreenchange" -> (this)
   "ended" -> (this)
   "open" -> (this)
   "closed" -> (this)
   "error" -> (this, tech) // Tech can be "flash" or "html5"
 */

// if iPad
if (navigator.userAgent.match(/Mac/) && navigator.maxTouchPoints && navigator.maxTouchPoints > 2) {
  document.querySelector('body').classList.add('ipad');
}
(function() {
  define(["jquery", "underscore", "backbone", "videojs", "modernizr", "js/memorial/views/sharingBoxView", "text!partials/experience/_video.html"], function($, _, Backbone, _V_, Modernizr, SharingBoxView, HTML) {
    return Backbone.View.extend({
      className: "video-view",
      events: {
        "click .close-button": "_onCloseClick"
      },
      DESTROY_ON_CLOSE: true,
      params: {
        controls: true,
        preload: "auto",
        loop: false,
        width: 800,
        height: 450,
        poster: "",
	      playsinline: true
      },
      isReady: function() {
        return this._ready || false;
      },
      isOpen: function() {
        return this._isOpen || false;
      },
      resize: function() {
        var $video, h, p, r, vr, w;
        if (!this._video) {
          return;
        }
        $video = this.$(".vjs-tech");
        w = this.$el.width();
        h = this.$el.height();
        r = w / h;
        vr = this._video.width() / this._video.height();
        if (r > vr && !$(this._video.el).hasClass("fullscreen")) {
          p = {
            "width": w + "px",
            "height": w / vr + "px",
            "margin-left": "0px",
            "margin-top": ((h - w / vr) * .5 + 50) + "px"
          };
        } else {
          p = {
            "width": "",
            "height": "",
            "margin-left": "",
            "margin-top": ""
          };
        }
        return $video.css(p);
      },

      /*
      Args:
        videoURLs : Array of video urls
        captionsURL : optional url to VTT file
        metadata : optional object containing related data to be used by sharing component, including:
          nid : id or nid of data object (for email)
          title : title string
          description : description string
          image: image url
          caption: caption string
       */
      setVideo: function(videoURLs, captionsURL, metadata) {
        if (!this._video) {
          return this._initVideo(videoURLs, captionsURL, metadata);
        }
        this._setTrack(captionsURL);
        this._isLoaded = false;
        this._setSources(videoURLs);
        return this._video.ready((function(_this) {
          return function() {
            var _results;
            _this._isLoaded = true;
            _results = [];
            while (_this._actions.length) {
              _results.push(_this._actions.shift().call());
            }
            return _results;
          };
        })(this));
      },
      setNavigation: function(elements) {
        this.$indicator = elements[0];
        this.$navigation = elements[1];
        this.$el.find('.carousel-indicators').remove();
        this.$el.find('.controls').remove();
        this.$el.append(this.$indicator);
        this.$el.append(this.$navigation);
        this.$indicator.find("li").click((function(_this) {
          return function(e) {
            return _this.trigger("slide", $(e.currentTarget).data("index"));
          };
        })(this));
        this.$navigation.find(".left").click((function(_this) {
          return function() {
            return _this.trigger("arrow", "previous");
          };
        })(this));
        return this.$navigation.find(".right").click((function(_this) {
          return function() {
            return _this.trigger("arrow", "next");
          };
        })(this));
      },
      fullscreen: function(bool) {
        if (!(this._video && this._isLoaded)) {
          return this._actions.push((function(_this) {
            return function() {
              return _this.fullscreen(bool);
            };
          })(this));
        }
        this._isFullscreen = bool;
        if (bool) {
          return this._video.requestFullScreen();
        } else {
          return this._video.cancelFullScreen();
        }
      },
      play: function() {
        if (!(this._video && this._isLoaded)) {
          return this._actions.push((function(_this) {
            return function() {
              return _this.play();
            };
          })(this));
        }
        this._isPlaying = true;
        return this._video.play();
      },
      pause: function() {
        if (!(this._video && this._isLoaded)) {
          return this._actions.push((function(_this) {
            return function() {
              return _this.pause();
            };
          })(this));
        }
        this._isPlaying = false;
        return this._video.pause();
      },
      stop: function() {
        if (!(this._video && this._isLoaded)) {
          return this._actions.push((function(_this) {
            return function() {
              return _this.stop();
            };
          })(this));
        }
        this._isPlaying = false;
        this._video.currentTime(0);
        return this._video.pause();
      },
      open: function(autoplay) {
        var duration;
        if (autoplay == null) {
          autoplay = true;
        }
        if (this._isOpen) {
          return;
        }
        this._isOpen = true;
        duration = 1200;
        this.$el.fadeIn({
          "duration": duration,
          "complete": (function(_this) {
            return function() {
              if (autoplay) {
                var promise = document.querySelector('video').play();

                if (promise !== undefined) {
                  promise.catch(error => {
                    console.log('NO AUTO PLAY');
                    $('.vjs-big-play-button').addClass('show');
                    $('.vjs-big-play-button').css('display', 'block');
                  });
                }
                return promise;
              }
            };
          })(this)
        });
        this.trigger("open", this);
        return $(document).bind('keydown', this._onKeyDown);
      },
      close: function(zoomUI) {
        var _zoomUI;
        if (zoomUI == null) {
          zoomUI = true;
        }
        if (!this._isOpen) {
          return;
        }
        this._isOpen = false;
        _zoomUI = zoomUI;
        $(document).unbind('keydown', this._onKeyDown);
        this.$navigation.find(".left").off();
        this.$navigation.find(".right").off();
        return this.$el.fadeOut({
          complete: (function(_this) {
            return function() {
              _this.stop();
              console.log('videoView close zoomUI', _zoomUI);
              if (_zoomUI) {
                _this.trigger("closed", _this);
              }
              if (_this.DESTROY_ON_CLOSE) {
                return _this._removeVideo();
              }
            };
          })(this)
        });
      },
      initialize: function(args) {
        this.params = _.extend(this.params, args.params);
        if (Modernizr.iphone) {
          this.params["controls"] = false;
        }
        this.$el.html(HTML);
        if (!this.$el.hasClass(this.className)) {
          this.$el.addClass(this.className);
        }
        this._$error = this.$(".error-message");
        this._flashError = this.$("#flash-fallback-html").html();
        this._$container = this.$(".video-container").css({
          "width": "100%",
          "height": "100%"
        });
        this.$(".video-container").append('<div class="video-play-button"><img src="/modules/custom/ike_pivitol_moments/src/img/ui/watch_film_icon.png" class="icon" alt="play icon"></div>');
        this.$(".video-container").append('<div class="video-pause-button"></div>');
        this.$('.video-play-button').on('click', function(e) {
          console.log('play');
          e.preventDefault();
          e.stopPropagation();
          $('video').trigger('play');
          $('.video-play-button').hide();
          $('.video-pause-button').show();
        });
        this.$('.video-pause-button').on('click', function (e) {
          console.log('pause');
          e.preventDefault();
          e.stopPropagation();
          $('video').trigger('pause');
          $('.video-pause-button').hide();
          $('.video-play-button').show();
        });
        if (args.source) {
          this._initVideo(args.source);
        }
        _V_.merge(_V_.ControlBar.prototype.options.components, {
          "shareButton": {}
        });
        _V_.ShareButton = _V_.Button.extend({

          /*
          Define metadata via static contents on creation
          metadata : optional object containing related data to be used by sharing component, including:
            nid : id or nid of data object (for email)
            title : title string
            description : description string
            image: image url
            caption: caption string
           */
          contents: null,
          init: function(player, options) {
            var p;
            this.sharebox = new SharingBoxView({
              contents: this.contents
            });
            return p = this._super(player, options);
          },
          buildCSSClass: function() {
            return " vjs-share-button ";
          },
          createElement: function(type, attrs) {
            var el;
            attrs = _V_.merge({
              className: this.buildCSSClass()
            }, attrs);
            el = this._super(type, attrs);
            $(el).append(this.sharebox.el);
            return el;
          }
        });
        _.bindAll(this, '_onKeyDown');
        return this._ready = true;
      },
      destroy: function() {
        this.params = null;
        this._actions = null;
        this._isLoaded = null;
        this._isPlaying = null;
        this._$error = null;
        this._flashError = null;
        this._$container = null;
        $(document).unbind("keydown", this._onKeyDown);
        if (this.$navigation) {
          this.$navigation.find(".left").off();
          this.$navigation.find(".right").off();
        }
        this._removeVideo();
        if (this.sharebox) {
          this.sharebox.destroy();
          this.sharebox = null;
        }
        return this.remove();
      },
      _isPlaying: false,
      _isLoaded: false,
      _actions: [],
      _initVideo: function(videoURLs, captionsURL, metadata) {
        var $video;
        this._$container.appendTo("body");
        $video = $(document.createElement("VIDEO")).appendTo(this._$container).attr({
          "class": "video-js vjs-default-skin ike-video",
          "width": this.params.width,
          "height": this.params.height,
          "controls": this.params.controls,
          "poster": this.params.poster,
          "playsinline": true

        });
        this._setSources(videoURLs, $video[0]);
        this._setTrack(captionsURL, $video[0]);
        _V_.ShareButton.prototype.contents = metadata;
        return _V_($video[0], this.params, (function(_this) {
          return function() {
            _this.$el.append(_this._$container);
            _this._onPlayerReady($video[0]);
            return _this.resize();
          };
        })(this));
      },
      _onPlayerReady: function(videoEl) {
        var _results;
        this._isLoaded = true;
        this._video = _V_(videoEl);
        this._video.addEvent("play", (function(_this) {
          return function() {
            return _this._onPlayerPlay();
          };
        })(this));
        this._video.addEvent("pause", (function(_this) {
          return function() {
            return _this._onPlayerPause();
          };
        })(this));
        this._video.addEvent("ended", (function(_this) {
          return function() {
            return _this._onPlayerFinish();
          };
        })(this));
        this._video.addEvent("loadeddata", (function(_this) {
          return function() {
            return _this._onLoadedData();
          };
        })(this));
        this._video.addEvent("fullscreenchange", (function(_this) {
          return function() {
            return _this._onFullScreen();
          };
        })(this));
        $(videoEl).find("track").remove();
        _results = [];
        while (this._actions.length) {
          _results.push(this._actions.shift().call());
        }
        return _results;
      },
      _removeVideo: function() {
        if (!this._video) {
          return;
        }
        this._video.removeEvent("play");
        this._video.removeEvent("pause");
        this._video.removeEvent("ended");
        this._video.removeEvent("loadeddata");
        this._video.removeEvent("fullscreenchange");
        $(this._video.el).remove();
        return this._video = null;
      },
      _getType: function(url) {
        var ext;
        ext = url.split(".").pop().split("?").shift();
        switch (ext) {
          case "mp4":
          case "ogg":
          case "webm":
            return "video/" + ext;
          case "m3u8":
            return "application/x-mpegURL";
        }
      },
      _setSources: function(videoURLs, videoElement) {
        var canPlayIt, sources;
        canPlayIt = false;
        sources = _.map(videoURLs, (function(_this) {
          return function(url) {
            var source;
            source = {
              src: url,
              type: _this._getType(url)
            };
            if (!canPlayIt) {
              canPlayIt = _V_["html5"].isSupported() && _V_["html5"].canPlaySource(source);
            }
            return source;
          };
        })(this));
        if (!(canPlayIt || _V_.flash.isSupported())) {
          this._$error.html(this._flashError);
          this._$error.show();
          this.trigger("error", this, "flash");
          return;
        }
        this._$error.hide();
        if (this._video) {
          this._video.src(sources);
          if (this._video.load != null) {
            return this._video.load();
          }
        } else {
          return _.each(sources, (function(_this) {
            return function(o) {
              var $source;
              return $source = $(document.createElement("SOURCE")).appendTo(videoElement).attr(o);
            };
          })(this));
        }
      },
      _setTrack: function(captionsURL, videoElement) {
        var $track, track;
        if (captionsURL == null) {
          captionsURL = "";
        }
        if (Modernizr.iphone) {
          return;
        }
        if (this._video) {
          track = this._video.textTracks[0];
          if (!track) {
            return;
          }
          $(this._video.controlBar.captionsButton.menu.el).children().removeClass("vjs-selected");
          if (captionsURL === track.src) {
            return;
          }
          track.src = captionsURL;
          track.readyState = 0;
          return track.cues = [];
        } else {
          return $track = $(document.createElement("TRACK")).appendTo(videoElement).attr({
            "src": captionsURL,
            "kind": "captions",
            "srclang": "en",
            "label": "English",
            "language": "english"
          });
        }
      },
      _onCloseClick: function() {
        return this.close();
      },
      _onLoadedData: function() {
        return this.trigger("loadeddata", this);
      },
      _onPlayerPlay: function() {
        return this.trigger("play", this);
      },
      _onPlayerPause: function() {
        return this.trigger("pause", this);
      },
      _onPlayerFinish: function() {
        return this.trigger("ended", this);
      },
      _onFullScreen: function(event) {
        if (this._video.isFullScreen) {
          $(this._video.el).addClass("fullscreen");
        } else {
          $(this._video.el).removeClass("fullscreen");
        }
        return this.trigger("fullscreenchange", this);
      },
      _onKeyDown: function(e) {
        switch (e.which) {
          case 37:
            this.trigger("arrow", "previous");
            break;
          case 39:
            this.trigger("arrow", "next");
        }
        return e.preventDefault();
      }
    });
  });

}).call(this);
