// Generated by CoffeeScript 1.8.0
(function() {
  define(["require", "jquery", "underscore", "backbone", "modernizr", "easeljs", "soundjs", "flashaudio", "videojs", "js/experience/views/pageThemeSelectorView", "js/experience/views/pageThemeView", "js/experience/views/aboutView", "js/memorial/views/sharingBoxView", "text!partials/experience/_404.html"], function(require, $, _, Backbone, Modernizr, easeljs, soundjs, flashaudio, _V_, PageThemeSelectorView, PageThemeView, AboutView, SharingBoxView, errorHTML) {
    return {
      init: function() {
        var $themeUL, onResize;
        this.config();
        this._$options = $("#main-header .link");
        this._$container = $("#theme");
        this._selectorView = new PageThemeSelectorView({
          el: $("#theme-selector"),
          model: new Backbone.Model({
            title: "Pivotal Moments",
            api: "/api/pm-themes.json",
            url: ""
          })
        });
        this._aboutView = new AboutView({
          el: $(".about-section")
        });
        this._aboutView.$el.hide();
        $.ajax({
          url: window.location.origin + "/about_experience",
          success: (function(_this) {
            return function(data) {
              return _this._aboutView.setData(data);
            };
          })(this)
        });
        this._selectorView.slider.collection.on("reset", (function(_this) {
          return function(collection) {
            var model;
            model = _this._selectorView.slider.collection.at(_this._selectorView.slider.getIndex());
            if (model) {
              _this.sharingView.setContents({
                "nid": model.get("nid")
              });
            }
            collection.each(function(model) {
              if (model.get("enabled")) {
                return _this._$options.filter("[href='" + model.get("target_url").replace(window.location.origin + window.location.pathname, "") + "']").addClass("active");
              }
            });
            return _this._$options.click(function(e) {
              if (window.location.hash.lastIndexOf($(e.currentTarget).attr("href")) > -1) {
                e.preventDefault();
                return _this._theme.returnToLanding();
              }
            });
          };
        })(this));
        $(".credits").on("click", (function(_this) {
          return function(event) {
            return _this._aboutView.open();
          };
        })(this));
        this._$soundSwitch = $(".button.audio").on("click", (function(_this) {
          return function(event) {
            return _this._onSoundSwitched(event);
          };
        })(this));
        this.sharingView = new SharingBoxView({
          el: $(".button.share"),
          model: new Backbone.Model({
            url: window.location.href,
            title: window.document.title
          })
        });
        this.router = new Backbone.Router({
          routes: {
            ":option(/:theme_nid)(/:subtheme_nid)(/:slide_nid)": "option"
          },
          pushState: false
        });
        this.router.on("route:option", this._onRoute, this);
        this.route = {};
        $themeUL = $(".theme-ul");
        onResize = function() {
          return $("#sub-header").width($themeUL.width()-70);
        };
        $(window).resize(function() {
          $("#sub-header").width($themeUL.width()-70);
          return onResize;
        });
        onResize();
        return Backbone.history.start();
      },
      _onRoute: function(option, nid, subnid, subsubnid) {
        var dur, model;
        this._$options.removeClass("selected").off("mouseover").filter("[href=\"" + "#/" + option + "\"]").addClass("selected").on("mouseover", (function(_this) {
          return function() {
            if (_this._theme != null) {
              return _this._theme.toggleSubmenu(true);
            }
          };
        })(this));
        $("#main-header").stop().fadeIn();
        $("#sub-header").html("");
        if (this._selectorView.$el.is(":visible")) {
          this._selectorView.updateURL(option, 500);
        } else {
          this._selectorView.updateURL(option, 0);
        }
        if (!(this.route.option === option && nid)) {
          dur = 500;
          this._selectorView.$el.fadeIn({
            duration: dur,
            complete: (function(_this) {
              return function() {
                return _this._destroyTheme();
              };
            })(this)
          });
          if (this._theme != null) {
            this._theme.fadeSound(0, dur);
          }
        }
        if (nid) {
          if (this._selectorView.slider.collection.length) {
            this._selectTheme(option, nid, subnid, subsubnid);
          } else {
            this._selectorView.slider.collection.on("reset", (function(_this) {
              return function() {
                return _this._selectTheme(option, nid, subnid, subsubnid);
              };
            })(this));
          }
        }
        this.route = {
          option: option,
          nid: nid,
          subnid: subnid,
          subsubnid: subsubnid
        };
        model = this._selectorView.slider.collection.at(this._selectorView.slider.getIndex());
        if (model) {
          return this.sharingView.setContents({
            "nid": model.get("nid")
          });
        }
      },
      _selectTheme: function(option, nid, subnid, subsubnid) {
        var model;
        model = this._selectorView.slider.collection.get(nid);
        if (this._theme != null) {
          this._destroyTheme();
        }
        this._theme = new PageThemeView({
          model: new Backbone.Model({
            nid: nid,
            title: model.get("title"),
            api: {
              themes: "/api/pm-themes.json" + "?theme_nid=" + nid,
              intro: "/api/pm-intro.json" + "?theme_nid=" + nid,
              contents: "/api/pm-subthemes.json" + "?theme_nid=" + nid,
              slideshow: "/api/pm-subtheme-slideshow.json" + "?slideshow_id=",
              panorama: "/api/panorama.json" + "?theme_nid=" + nid
            },
            url: option + "/" + nid,
            subnid: subnid,
            subsubnid: subsubnid
          })
        });
        this._$container.show().html(this._theme.el);
        this._theme.model.on("change", this._onModelChange, this);
        this._theme.on("ready", this._onViewReady, this);
        this._theme.on("progress", this._onViewProgress, this);
        return this._theme.on("error", this._onViewError, this);
      },
      _destroyTheme: function() {
        if (!this._theme) {
          return;
        }
        this._theme.off("ready", this._onViewReady, this);
        this._theme.off("progress", this._onViewProgress, this);
        this._theme.off("error", this._onViewError, this);
        this._theme.destroy();
        this._theme = null;
        return this._$container.empty();
      },
      _onViewReady: function(theme) {
        if (this.$loader) {
          this.$loader.fadeOut();
        }
        theme.off("ready", this.onViewReady, this);
        theme.$el.show();
        return this._selectorView.$el.fadeOut({
          duration: 2000,
          delay: 500,
          complete: (function(_this) {
            return function() {
              return _this._selectorView.setLoadProgress();
            };
          })(this)
        });
      },
      _onSoundSwitched: function(event) {
        var value, vol;
        value = this._$soundSwitch.hasClass("off");
        if (value) {
          this._$soundSwitch.removeClass("off");
        } else {
          this._$soundSwitch.addClass("off");
        }
        vol = value ? 1 : 0;
        if (this._theme) {
          return this._theme.fadeSound(vol, 500);
        }
      },
      _onAboutClicked: function() {
        return this._aboutView.open();
      },
      _onViewProgress: function(loaded, total, progress) {
        return this._selectorView.setLoadProgress(loaded);
      },
      _onViewError: function(msg) {
        return console.log(msg);
      },
      _onModelChange: function(model) {
        var subnid;
        subnid = _.reduce(model.get("subnid"), function(memo, value, key) {
          return memo += (memo ? "&" + key + "=" + value : key + "=" + value);
        }, "");
        return this.router.navigate(model.get("url") + "?" + subnid, false);
      },
      config: function() {
        Modernizr.addTest("android", function() {
          return /Android/i.test(navigator.userAgent);
        });
        Modernizr.addTest("iphone", function() {
          return /iPhone|iPod/i.test(navigator.userAgent);
        });
        Modernizr.addTest("ipad", function() {
          return /iPad/i.test(navigator.userAgent);
        });
        Modernizr.addTest("mobile", function() {
          return /Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent);
        });
        if (window.location.origin == null) {
          window.location.origin = window.location.protocol + "//" + window.location.hostname + (window.location.port != null ? ':' + window.location.port : '');
        }
        _V_.options.flash.swf = "/static/swf/video-js.swf";
        createjs.FlashPlugin.BASE_PATH = "/static/swf/";
        createjs.Sound.registerPlugins([createjs.FlashPlugin, createjs.WebAudioPlugin, createjs.HTMLAudioPlugin]);
        createjs.Sound.activePlugin.showOutput = false;
        createjs.Ticker.useRAF = true;
        createjs.Ticker.setFPS(30);
        return _.templateSettings = {
          evaluate: /\{\{(.+?)\}\}/g,
          interpolate: /\{\{=(.+?)\}\}/g,
          escape: /\{\{-(.+?)\}\}/g
        };
      }
    };
  });

  window.isMobile = function() {
    var mobile, ua;
    ua = navigator.userAgent;
    mobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(ua);
    return mobile;
  };

  window.delay = function(time, callback) {
    return setTimeout(callback, time);
  };

}).call(this);
