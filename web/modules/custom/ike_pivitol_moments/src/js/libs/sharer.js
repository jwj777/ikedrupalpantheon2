// Generated by CoffeeScript 1.8.0

/*
SHARER.JS
Basic Static Class to get handlers to share a url using social media via GET APIs.
All share functions get contents and params and return a callback to be added to a click event or some other handler
Contents is an object consistent accross methods.
  contents: {
    url: Optional string with url of page if none is provided window.location will be used
    title: Optional string with title of page
    description: Optional string with description of page
    image: Optional string with image of page
    caption: Optional string with caption of page
Params change depending on method (and original API).
Check each method to figure out which ones are accepted.
Usually something like
  params: {
    apiUrl: use this to override default API url
    ...
  }
 */

(function() {
  this.sharerjs = this.sharerjs || {

    /*
      URL constants. Can be overriden on local methods
     */
    FACEBOOK_SHARE_URL: "https://www.facebook.com/sharer/sharer.php",
    TWITTER_SHARE_URL: "https://twitter.com/share",
    GOOGLEPLUS_SHARE_URL: "https://plus.google.com/share",

    /*
        Contents (see header instructions)
        Params:
          apiUrl: new or default TWITTER_SHARE_URL
     */
    getTwitterSharer: function(contents, params) {
      var args;
      if (contents == null) {
        contents = {};
      }
      if (params == null) {
        params = {};
      }
      args = {};
      args.url = params.apiUrl || this.TWITTER_SHARE_URL;
      args.url += "?url=" + encodeURIComponent(contents.url || window.location);
      return this.getSharer(args);
    },

    /*
      Contents (see header instructions)
      Params:
        appId: App ID
        apiUrl: new or default TWITTER_SHARE_URL
     */
    getFacebookSharer: function(contents, params) {
      var args;
      if (contents == null) {
        contents = {};
      }
      if (params == null) {
        params = {};
      }
      args = {};
      args.url = params.apiUrl || this.FACEBOOK_SHARE_URL;
      args.url += "?u=" + encodeURIComponent(window.location.href);

      // args.url += "&app_id=" + encodeURIComponent(params.appId);
      // if (contents.title) {
      //   args.url += "&name=" + encodeURIComponent(contents.title.replace(/<[^>]*>/gi, ""));
      // }
      // if (contents.description) {
      //   args.url += "&description=" + encodeURIComponent(contents.description.replace(/<[^>]*>/gi, ""));
      // }
      // if (contents.image) {
      //   args.url += "&picture=" + encodeURIComponent(contents.image);
      // }
      // if (contents.caption) {
      //   args.url += "&caption=" + encodeURIComponent(contents.caption.replace(/<[^>]*>/gi, ""));
      // }
      // args.url += "&redirect_uri=" + encodeURIComponent(contents.redirect || "http://www.facebook.com");
      return this.getSharer(args);
    },

    /*
      Contents (see header instructions)
      Params:
        apiUrl: new or default TWITTER_SHARE_URL
     */
    getYoutube: function(contents, params) {
      var args;
      if (contents == null) {
        contents = {};
      }
      if (params == null) {
        params = {};
      }
      args = {};
      args.url = "https://www.youtube.com/user/EisenhowerMemorial";
      // args.url = params.apiUrl || this.GOOGLEPLUS_SHARE_URL;
      // args.url += "?url=" + encodeURIComponent(contents.url || window.location);
      return this.getSharer(args);
    },

    /*
    Common function to display new window to share. Can be used for new APIs or internal services like email sharing
    Args:
      url: string url to share api with GET args
      width: window width
      height: window height
      top: window top
      left: window left
     */
    getSharer: function(args) {
      var specs;
      if (args == null) {
        args = {};
      }
      specs = "location=no,menubar=no,status=no,titlebar=no,toolbar=no";
      specs += ",width=" + (args.width || 980);
      specs += ",height=" + (args.height || 610);
      specs += ",top=" + (args.top || 10);
      specs += ",left=" + (args.left || 10);
      return function() {
        return window.open(args.url, "_blank", specs);
      };
    }
  };

}).call(this);
