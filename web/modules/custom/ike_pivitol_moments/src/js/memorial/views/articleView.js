// Generated by CoffeeScript 1.8.0

/*
ARTICLE LIST VIEW
Args:{
model : model of type article model
}
 */

(function() {
  define(["jquery", "underscore", "backbone", "js/memorial/models/articleModel", "js/memorial/collections/selectiveCollection", "js/memorial/views/listView", "text!partials/memorial/_article.tpl.html", "text!partials/memorial/_articlepreview.tpl.html"], function($, _, Backbone, ArticleModel, SelectiveCollection, ListView, template, previewTemplate) {
    return Backbone.View.extend({
      className: "article-view",
      tagName: "article",
      newsLimit: 3,
      initialize: function(args) {
        var collection;
        this.model.on("change", this.onModelChanged, this);
        this.template = _.template(template);
        collection = new SelectiveCollection();
        collection.model = ArticleModel;
        collection.url = this.model.url;
        collection.on("all", this.onCollectionChange, this);
        this.relatedListView = new ListView({
          collection: collection,
          template: previewTemplate
        });
        return this.onModelChanged(this.model);
      },
      load: function(id) {
        if (id === this.model.get("nid")) {
          return;
        }
        this.$el.empty();
        this.model.fetch({
          data: {
            nid: id
          }
        });
        return this.relatedListView.collection.exclude([id], "nid");
      },
      onModelChanged: function(model) {
        this.$el.empty();
        this.$el.html(this.template(model.toJSON()));
        this.$el.children(".content").hide().fadeIn(500);
        this.$related = this.$el.children(".related");
        if (model.get("tags")) {
          this.$el.children(".content").addClass("tagged");
          this.relatedListView.collection.fetch({
            data: {
              limit: this.newsLimit + 1,
              tags: model.get("tags").join(",")
            }
          });
          this.$related.find(".list").html(this.relatedListView.el);
          return this.$related.hide();
        } else {
          return this.$related.empty();
        }
      },
      onCollectionChange: function(collection) {
        var $articles;
        $articles = this.relatedListView.$el.children();
        return this.$related.fadeIn();
      }
    });
  });

}).call(this);
