// Generated by CoffeeScript 1.8.0

/*
PAGE OVERVIEW
Args:{
model : urlModel with page data (assigned before initialize by parent class)
}
Triggers:
"ready" : function(view) when it's ready to be displayed
 */

(function() {
  define(["jquery", "underscore", "backbone", "routes", "js/memorial/models/featuredSectionModel", "js/memorial/views/featuredSectionView", "js/memorial/views/galleryView", "text!partials/memorial/_overview.html"], function($, _, Backbone, Routes, SectionModel, SectionView, GalleryView, html) {
    return Backbone.View.extend({
      className: "page-overview-view",
      initialize: function() {
        this.model.on("change:params", this._onParamsChange, this);
        this.$el.html(html);
        this.collection = new Backbone.Collection();
        this.collection.model = SectionModel;
        this.collection.url = this.model.get("api");
        this.collection.on("reset", this._onCollectionReset, this);
        return this.collection.fetch();
      },
      _onCollectionReset: function(collection) {
        collection.off("reset", this._onCollectionReset, this);
        collection.each(function(model) {
          var r, section;
          section = (model.get("section") ? model.get("section").replace(/^[\s]+|[\s]+$/g, "") : "");
          r = _.where(Routes.data, {
            section: section
          });
          if (r.length) {
            return model.set({
              url: r[0]["url"]
            }, {
              silent: true
            });
          }
        });
        this.gallery = new GalleryView({
          view: SectionView,
          collection: collection,
          index: (this.model.get("params") ? parseInt(this.model.get("params")["p"]) : 0),
          interval: 0
        });
        this.$el.children(".content").html(this.gallery.el);
        this.gallery.on("change:index", this._onIndexChange, this);
        return this.trigger("ready", this);
      },
      _onParamsChange: function(model) {
        var index;
        index = (this.model.get("params") ? parseInt(this.model.get("params")["p"]) : 0);
        return this.gallery.moveTo(index, 0);
      },
      _onIndexChange: function(index) {
        return this.model.set("params", {
          p: index
        });
      },
      destroy: function() {
        this.collection.off("reset", this._onCollectionReset, this);
        if (this.gallery) {
          this.gallery.off("change", this._onIndexChange, this);
          this.gallery.destroy();
        }
        return this.remove();
      }
    });
  });

}).call(this);
