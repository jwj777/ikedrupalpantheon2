// Generated by CoffeeScript 1.8.0

/*
COMMITEES VIEW PAGE
Args:{
model : urlModel with page data (assigned before initialize by parent class)
}
Triggers:
"ready" : function(view) when it's ready to be displayed
 */

(function() {
  define(["jquery", "underscore", "backbone", "js/memorial/views/memberListView", "text!partials/memorial/_committees.html"], function($, _, Backbone, MemberListView, html) {
    return Backbone.View.extend({
      className: "page-committees-view",
      initialize: function() {
        var collection;
        this.$el.html(html);
        collection = new Backbone.Collection();
        collection.url = this.model.get("api")["legacy"];
        if (this.model.get("api")["legacy"]) {
          this.legacyView = new MemberListView({
            collection: collection
          });
          this.$(".legacy .member-list").html(this.legacyView.el);
        }
        collection.fetch({
          complete: (function(_this) {
            return function() {
              _this.legacyReady = true;
              return _this.onComplete();
            };
          })(this)
        });
        collection = new Backbone.Collection();
        collection.url = this.model.get("api")["advisory"];
        if (this.model.get("api")["advisory"]) {
          this.advisoryView = new MemberListView({
            collection: collection
          });
          this.$(".advisory .member-list").html(this.advisoryView.el);
        }
        collection.fetch({
          complete: (function(_this) {
            return function() {
              _this.advisoryReady = true;
              return _this.onComplete();
            };
          })(this)
        });
        collection = new Backbone.Collection();
        collection.url = this.model.get("api")["international"];
        if (this.model.get("api")["international"]) {
          this.internationalView = new MemberListView({
            collection: collection
          });
          this.$(".international .member-list").html(this.internationalView.el);
        }
        return collection.fetch({
          complete: (function(_this) {
            return function() {
              _this.internationalReady = true;
              return _this.onComplete();
            };
          })(this)
        });
      },
      onComplete: function() {
        if (this.internationalReady && this.advisoryReady && this.legacyReady) {
          return this.trigger("ready", this);
        }
      },
      destroy: function() {
        if (this.legacyView && this.legacyView.destroy !== undefined) {
          this.legacyView.destroy();
        }
        if (this.advisoryView && this.advisoryView.destroy !== undefined) {
          this.advisoryView.destroy();
        }
        if (this.internationalView && this.internationalView.destroy !== undefined) {
          this.internationalView.destroy();
        }
        return this.remove();
      }
    });
  });

}).call(this);
