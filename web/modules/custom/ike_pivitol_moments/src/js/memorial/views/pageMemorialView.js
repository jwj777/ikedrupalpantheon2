// Generated by CoffeeScript 1.8.0

/*
GENERAL MEMORIAL PAGE VIEW
Args:{
    model : urlModel with page data (assigned before initialize by parent class)
}
Triggers:
 "ready" : function(view) when it's ready to be displayed
 */

(function() {
  define(["jquery", "underscore", "backbone", "routes", "js/memorial/models/sectionModel", "js/memorial/views/memorialSectionView", "js/memorial/views/galleryView", "js/memorial/views/infoBoxView", "js/memorial/views/mapNavView", "text!partials/memorial/_memorial.html"], function($, _, Backbone, Routes, SectionModel, SectionView, GalleryView, InfoBoxView, MapNav, html) {
    return Backbone.View.extend({
      className: "page-memorial-view",
      initialize: function(args) {
        this.sectionModel = this.sectionModel || SectionModel;
        this.sectionView = this.sectionView || SectionView;
        this.model.on("change:params", this._onParamsChange, this);
        this.$el.html(html);
        this.collection = new Backbone.Collection();
        this.collection.model = this.sectionModel;
        this.collection.url = this.model.get("api");
        this.index = (this.model.get("params") ? this.model.get("params")["p"] : 0);
        this.gallery = new GalleryView({
          view: this.sectionView,
          collection: this.collection,
          loop: false,
          interval: 0
        });
        this.$(".memorial-content").html(this.gallery.el);
        this.infoBox = new InfoBoxView({
          collection: this.collection
        });
        this.$(".info-box").html(this.infoBox.el);
        this.mapNav = new MapNav({
          collection: this.collection
        });
        this.gallery.addWidget(this.mapNav);
        this.gallery.on("change:index", this._onGalleryIndexChange, this);
        this.infoBox.on("change:index", this._onComponentIndexChange, this);
        this.mapNav.on("change:index", this._onComponentIndexChange, this);
        this.collection.on("reset", this._onCollectionReset, this);
        return this.collection.fetch();
      },
      _onCollectionReset: function(collection) {
        this.collection.off("reset", this._onCollectionReset, this);
        switch (this.index) {
          case "first":
            this.index = 0;
            break;
          case "last":
            this.index = this.collection.length - 1;
            break;
          default:
            this.index = parseInt(this.index);
        }
        this.gallery.moveTo(this.index, 0);
        return this.trigger("ready", this);
      },
      _onParamsChange: function(model) {
        var index;
        index = (this.model.get("params") ? parseInt(this.model.get("params")["p"]) : 0);
        return this.gallery.moveTo(index, 0);
      },
      _onComponentIndexChange: function(index) {
        return this.gallery.moveTo(index);
      },
      _onGalleryIndexChange: function(index, rawIndex) {
        var i, p;
        if (rawIndex < 0 || rawIndex >= this.collection.length) {
          if (this.routeIndex === undefined) {
            _.find(Routes["data"], (function(o, index) {
              if (o["url"] === this.model.get("url")) {
                this.routeIndex = index;
                return true;
              }
            }), this);
          }
          i = (rawIndex < 0 ? -1 : 1);
          p = (rawIndex < 0 ? "?p=last" : "?p=first");
          return window.location.hash = Routes["data"][this.routeIndex + i]["url"] + p;
        } else {
          this.model.set("params", {
            p: index
          });
          this.infoBox.setIndex(index, true);
          return this.mapNav.setIndex(index, true);
        }
      },
      destroy: function() {
        this.collection.off("reset", this._onCollectionReset, this);
        this.model.off("change:params", this._onParamsChange, this);
        this.gallery.off("change:index", this._onGalleryIndexChange, this);
        this.gallery.destroy();
        this.infoBox.off("change:index", this._onComponentIndexChange, this);
        this.infoBox.destroy();
        this.mapNav.off("change:index", this._onComponentIndexChange, this);
        this.mapNav.destroy();
        return this.remove();
      }
    });
  });

}).call(this);
