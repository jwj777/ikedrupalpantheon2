// Generated by CoffeeScript 1.8.0

/*
INFO BOX VIEW
Args:{
collection: collection with model type SectionModel
index: index to start with
}
Triggers:
"change:index"
 */

(function() {
  define(["jquery", "underscore", "backbone", "text!partials/memorial/_infobox.html"], function($, _, Backbone, html) {
    return Backbone.View.extend({
      className: "info-box-view",
      initialize: function(args) {
        var self;
        this.collection = args.collection;
        this.index = args.index || 0;
        this.$el.html(html);
        this.$title = this.$el.children(".title");
        this.$description = this.$el.children(".description");
        this.$selectorHolder = this.$(".selectors");
        this.selectors = [];
        self = this;
        this.$prevbtn = this.$(".link.prev").click(function() {
          return self.setIndex(self.index - 1);
        });
        this.$nextbtn = this.$(".link.next").click(function() {
          return self.setIndex(self.index + 1);
        });
        if (this.collection.length) {
          return this._onCollectionChange(this.collection);
        } else {
          return this.collection.on("reset", this._onCollectionChange, this);
        }
      },
      setIndex: function(index, silent) {
        if (index === this.index) {
          return;
        }
        this.index = index || 0;
        this.render();
        return this.trigger("change:index", index);
      },
      render: function() {
        var model;
        if (!this.collection.length || this.index < 0 || this.index >= this.collection.length) {
          return;
        }
        model = this.collection.at(this.index);
        this.$title.html(model.get("title"));
        this.$description.html(model.get("description"));
        this.$selectorHolder.children().removeClass("active");
        if (this.index < this.selectors.length) {
          this.selectors[this.index].addClass("active");
        }
        return this;
      },
      _onCollectionChange: function(collection) {
        var self;
        this.$selectorHolder.empty();
        this.selectors = [];
        self = this;
        collection.each(function(model, index) {
          var $a, active;
          active = (index === self.index ? " active" : "");
          $a = $("<a></a>").attr({
            "class": "selector" + active
          }).click(function() {
            return self.setIndex(index);
          });
          self.selectors.push($a);
          return self.$selectorHolder.append($a);
        });
        if (collection.length > 1) {
          this.$selectorHolder.show();
        } else {
          this.$selectorHolder.hide();
        }
        return this.render();
      },
      destroy: function() {
        this.collection.off("reset", this._onCollectionChange, this);
        this.$prevbtn.unbind("click");
        this.$nextbtn.unbind("click");
        return this.remove();
      }
    });
  });

}).call(this);
