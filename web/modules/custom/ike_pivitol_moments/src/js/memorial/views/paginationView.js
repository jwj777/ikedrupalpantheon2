// Generated by CoffeeScript 1.8.0
(function() {
  define(["jquery", "underscore", "backbone", "js/memorial/models/paginationModel"], function($, _, Backbone, ModelClass) {
    return Backbone.View.extend({
      className: "pagination-view",
      tagName: "nav",
      nextLabel: "next",
      prevLabel: "prev",
      pages: 5,
      events: {
        "click .link": "pageButtonClicked"
      },
      initialize: function(args) {
        this.model = this.model || new ModelClass();
        this.model.on("change", this.render, this);
        return this.render();
      },
      render: function(model) {
        var hl, i, l, m, ml, mo, mt, p, t;
        this.$el.empty();
        ml = parseInt(this.model.get("limit"));
        mt = parseInt(this.model.get("total"));
        mo = parseInt(this.model.get("offset"));
        p = parseInt(mo / ml);
        t = Math.ceil(mt / ml);
        l = this.pages;
        p = (p > 0 ? (p < t ? p : t) : 0);
        l = (l < t ? l : t);
        hl = parseInt(l * .5);
        i = (p - hl > 0 ? (p + hl < t ? parseInt(p - hl) : t - l) : 0);
        m = (i + l < +t ? i + l : t);
        if (m > 1) {
          i = 0;
          while (i < m) {
            this.$el.append("<a class='link page-number" + (i === p ? " active" : "") + "'>" + (i + 1) + "</a>");
            i++;
          }
        }
        if (p > 0) {
          this.$el.prepend("<a class='link page-button'></a>", this.prevLabel);
        }
        if (p < t - 1) {
          this.$el.append("<a class='link page-button'></a>", this.nextLabel);
        }
        return this;
      },
      pageButtonClicked: function(event) {
        var ml, mo, mt, p, t, txt;
        ml = parseInt(this.model.get("limit"));
        mt = parseInt(this.model.get("total"));
        mo = parseInt(this.model.get("offset"));
        p = parseInt(mo / ml);
        t = parseInt(mt / ml);
        txt = this.$(event.currentTarget).text();
        switch (txt) {
          case this.nextLabel:
            p++;
            break;
          case this.prevLabel:
            p--;
            break;
          default:
            p = parseInt(txt) - 1;
        }
        p = (p > 0 ? (p < t ? p : t) : 0);
        return this.model.set({
          offset: p * ml
        });
      },
      destroy: function() {
        this.model.off("change", this.render, this);
        return this.remove();
      }
    });
  });

}).call(this);
