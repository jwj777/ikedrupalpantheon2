// Generated by CoffeeScript 1.8.0

/*
GALLERY VIEW
General Gallery view (includes slider, sharing component, fullscreen view, and location component)
Args:{
    collection : collection of SectionModel models.
 view : view class to display models of collection (model and view need to be consistent)
 index : set index of slider,
 loop : set slider loop,
 interval : set slider autoplay interval (miliseconds)
}
Triggers:
 "change:index" -> Index has changed. Params : index (this.index), rawIndex (original index passed to setIndex before validation)
 */

(function() {
  define(["jquery", "underscore", "backbone", "js/memorial/views/sliderView", "js/memorial/views/sharingBoxView", "js/memorial/views/fullscreenView", "text!partials/memorial/_gallery.html"], function($, _, Backbone, SliderView, SharingBox, FullscreenView, html) {
    return Backbone.View.extend({
      className: "gallery-view",
      initialize: function(args) {
        var self;
        this.index = args.index;
        this.collection = args.collection;
        this.collection.on("reset", this._onCollectionReset, this);
        this.$el.html(html);
        this.slider = new SliderView({
          index: this.index,
          collection: this.collection,
          createAmount: 10,
          className: "slider",
          viewClass: args.view,
          loop: args.loop,
          interval: args.interval
        });
        this.$el.children(".sections").html(this.slider.el);
        self = this;
        this.$leftControl = this.$el.children(".sections-nav.left").click(function(event) {
          return self.moveTo(self.slider.index - 1);
        });
        this.$rightControl = this.$el.children(".sections-nav.right").click(function(event) {
          return self.moveTo(self.slider.index + 1);
        });
        this.$widgets = this.$el.children(".widgets");
        this.sharingBoxView = new SharingBox();
        this.addWidget(this.sharingBoxView);
        this.fullscreenView = new FullscreenView({
          collection: this.collection,
          index: this.index
        });
        this.addWidget(this.fullscreenView);
        this.slider.on("change:index", this._onIndexChange, this);
        this.fullscreenView.on("change:isOpen", this._onFullscreenOpenChange, this);
        this.fullscreenView.on("change:index", this._onIndexChange, this);
        this.slider.play();
        return this._updateSharingBox(this.index);
      },
      addWidget: function(view) {
        var $w;
        $w = $("<div></div>").attr({
          "class": "widget-item"
        }).append(view.el);
        return this.$widgets.append($w);
      },
      moveTo: function(index, duration) {
        if (this.index === index) {
          return;
        }
        this.index = index;
        if (!this.fullscreenView.isOpen) {
          return this.slider.moveTo(this.index, duration);
        } else {
          return this.fullscreenView.moveTo(this.index, duration);
        }
      },
      _updateSharingBox: function(index) {
        var contents, model;
        if (!this.sharingBoxView) {
          return;
        }
        if (!index) {
          index = 0;
        }
        contents = void 0;
        model = void 0;
        if (index < this.collection.length) {
          model = this.collection.at(index);
          contents = model.toJSON();
          contents["url"] = window.location;
          contents["image"] = model.getImage("small");
        }
        return this.sharingBoxView.setContents(contents);
      },
      _onCollectionReset: function() {
        return this._updateSharingBox(this.index);
      },
      _onIndexChange: function(index, rawIndex) {
        this.index = index;
        this._updateSharingBox(this.index);
        return this.trigger("change:index", this.index, rawIndex);
      },
      _onFullscreenOpenChange: function(isOpen) {
        if (isOpen) {
          this.fullscreenView.moveTo(this.slider.index, 0);
          return this.slider.stop();
        } else {
          this.slider.moveTo(this.fullscreenView.index, 0);
          return this.slider.play();
        }
      },
      destroy: function() {
        this.slider.off("change:index", this._onIndexChange, this);
        this.slider.destroy();
        this.sharingBoxView.destroy();
        this.fullscreenView.off("change:isOpen", this._onFullscreenOpenChange, this);
        this.fullscreenView.off("change:index", this._onIndexChange, this);
        this.fullscreenView.destroy();
        this.$leftControl.unbind("click");
        this.$rightControl.unbind("click");
        return this.remove();
      }
    });
  });

}).call(this);
