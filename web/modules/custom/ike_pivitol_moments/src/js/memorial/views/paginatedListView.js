// Generated by CoffeeScript 1.8.0

/*
PAGINATED LIST VIEW -> Subclass of ListView
Args:{
collection: collection of models consistent with template
template: template html consistent with models of collection
offset: default offset to start the pages
limit: limit of items per page
}
 */

(function() {
  define(["jquery", "underscore", "backbone", "js/memorial/models/paginationModel", "js/memorial/views/listView", "js/memorial/views/paginationView"], function($, _, Backbone, PaginationModel, ListViewClass, PaginationView) {
    return ListViewClass.extend({
      className: "list-view paginated-list-view",
      initialize: function(args) {
        ListViewClass.prototype.initialize.call(this, args);
        this.pagination = new PaginationView({
          model: new PaginationModel({
            offset: (args["offset"] ? args["offset"] : 0),
            limit: (args["limit"] ? args["limit"] : 8)
          })
        });
        return this.pagination.model.on("change:offset", this.updateCollection, this);
      },
      render: function() {
        var total;
        ListViewClass.prototype.render.call(this);
        if (!this.collection.length) {
          return;
        }
        total = this.collection.at(0).get("_total_rows");
        if (this.pagination.model.get("total") !== total) {
          this.pagination.model.set({
            total: total
          });
        }
        this.$el.append(this.pagination.el);
        this.pagination.delegateEvents();
        return this;
      },
      updateCollection: function(model) {
        this.$el.empty();
        return this.collection.fetch({
          data: {
            offset: model.get("offset"),
            limit: model.get("limit")
          }
        });
      },
      destroy: function() {
        ListViewClass.prototype.destroy.call(this);
        this.pagination.model.off("change:offset", this.updateCollection, this);
        this.pagination.destroy();
        return this.remove();
      }
    });
  });

}).call(this);
