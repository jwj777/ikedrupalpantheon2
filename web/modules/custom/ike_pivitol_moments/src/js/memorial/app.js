// Generated by CoffeeScript 1.8.0


(function() {
  define(["require", "jquery", "underscore", "backbone", "routes", "text!partials/memorial/_404.html"], function(require, $, _, Backbone, Routes, errorHTML) {
    return {
      init: function() {
        this.config();
        this.$menu = $("#site-header .main-menu .menu-item").bind("mouseover", function(event) {
          return $(event.currentTarget).find(".sec-menu").addClass("hover");
        }).bind("mouseleave", function(event) {
          return $(event.currentTarget).find(".sec-menu").removeClass("hover");
        });
        this.routes = {};
        _.each(Routes["data"], (function(o) {
          return this.routes[o["url"]] = o;
        }), this);
        this.$container = $("#main-content");
        this.router = new Backbone.Router({
          routes: {
            "*path": "path"
          }
        });
        this.router.on("route:path", (function(path) {
          var error, params, parts, routeData, self, view;
          if (path == null) {
            path = "";
          }
          parts = path.split("?");
          path = parts[0];
          params = {};
          if (parts.length > 1) {
            parts = parts[1].replace(/([^=&]+)=([^=&]+)/g, function(m, k, v) {
              return params[k] = v;
            });
          }
          if (this.view && this.path === path) {
            this.view.model.set("params", params);
          } else {
            view = this.view;
            if (view != null) {
              view.off("ready", this.onViewReady, this);
              view.model.off("change", this.onModelChange, this);
              if (view.destroy !== undefined) {
                view.destroy();
              }
            }
            routeData = this.routes[path];
            this.$menu.find(".active").removeClass("active");
            this.$menu.filter(".sec-menu-item").children("a[href='/#/" + path + "']").addClass("active").closest(".sec-menu").addClass("active");
            this.$menu.children("a[href='/#/" + path + "']").closest(".main-menu-item").children(".marker").addClass("active");
            self = this;
            try {
              require([routeData["js"]], function(ViewClass) {
                self.view = new ViewClass({
                  model: new Backbone.Model({
                    title: routeData["title"],
                    api: routeData["api"],
                    js: routeData["js"],
                    url: path,
                    params: params
                  })
                });
                self.view.$el.hide();
                self.view.model.on("change", self.onModelChange, self);
                self.$container.html(self.view.el);
                self.$loader = (self.$loader || $(document.createElement("img")).attr("src", "/static/img/ui/loading.gif").addClass("loading-icon")).fadeIn();
                self.$container.append(self.$loader);
                if (self.view.model.get("api")) {
                  return self.view.on("ready", self.onViewReady, self);
                } else {
                  return self.onViewReady(self.view);
                }
              });
            } catch (_error) {
              error = _error;
              this.view = null;
              this.$container.html(errorHTML);
            }
          }
          return this.path = path;
        }), this);
        return Backbone.history.start();
      },
      onViewReady: function(view) {
        if (this.$loader) {
          this.$loader.fadeOut();
        }
        view.off("ready:view", this.onViewReady, this);
        return view.$el.fadeIn(500);
      },
      onModelChange: function(model) {
        var params;
        params = _.reduce(model.get("params"), function(memo, value, key) {
          return memo += (memo ? "&" + key + "=" + value : key + "=" + value);
        }, "");
        return this.router.navigate(model.get("url") + "?" + params, false);
      },
      config: function() {
        Modernizr.addTest("android", function() {
          return /Android/i.test(navigator.userAgent);
        });
        Modernizr.addTest("iphone", function() {
          return /iPhone|iPod/i.test(navigator.userAgent);
        });
        Modernizr.addTest("ipad", function() {
          return /iPad/i.test(navigator.userAgent);
        });
        Modernizr.addTest("mobile", function() {
          return /Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent);
        });
        return _.templateSettings = {
          evaluate: /\{\{(.+?)\}\}/g,
          interpolate: /\{\{=(.+?)\}\}/g,
          escape: /\{\{-(.+?)\}\}/g
        };
      }
    };
  });

}).call(this);


function waitForElementToDisplay(selector, time) {
    if(document.querySelector(selector)!=null) {

    import('/static/js/libs/flipclock.js').then(module => {
        var clock;

        $(document).ready(function() {
            // Grab the current date
            var currentDate = new Date();
                // Set some date in the past. In this case, it's always been since Jan 1
                // var pastDate  = new Date(2020, 0, 1);
            var pastDate  = new Date("May 8, 2020 9:30:00");
                // console.log(pastDate)
                // Calculate the difference in seconds between the future and current date
            var diff = (currentDate.getTime() / 1000 - pastDate.getTime() / 1000) * -1;
                // Instantiate a coutdown FlipClock

            console.log(diff);
            clock = $('.clock').FlipClock(diff, {
                clockFace: 'DailyCounter',
                showSeconds: false,
                countdown: true
            });
        });
    });

    // update donation box styling
    $(".donate-header-text").css("left", "21%");
    $(".donate-header-text").css("width", "59%");
    $(".donor-title-txt").css("margin-bottom", "40px");


    }
    else {
        setTimeout(function() {
            waitForElementToDisplay(selector, time);
        }, time);
    }
}


//Add countdown clock using only JS and jquery

(function() {
   // inject stylesheet and correct version of jquery (jquery injection is likely redundant)
    document.head.innerHTML = document.head.innerHTML + '<link rel="stylesheet" href="/static/css/flipclock.css"> <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>';

    waitForElementToDisplay(".donor-subtitle-txt", 50);
}).call(this);

